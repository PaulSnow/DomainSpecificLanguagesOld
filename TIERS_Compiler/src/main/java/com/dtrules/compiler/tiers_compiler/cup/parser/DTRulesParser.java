
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 14 13:53:56 CDT 2011
//----------------------------------------------------

package com.dtrules.compiler.tiers_compiler.cup.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 14 13:53:56 CDT 2011
  */
public class DTRulesParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DTRulesParser() {super();}

  /** Constructor which sets the default scanner. */
  public DTRulesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DTRulesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\341\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\053\003\000\002\006\005\000" +
    "\002\006\004\000\002\004\005\000\002\004\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\064\002\000\002\005\006\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\007\003\000\002\007\003\000" +
    "\002\031\003\000\002\010\004\000\002\046\003\000\002" +
    "\046\005\000\002\046\007\000\002\046\004\000\002\046" +
    "\006\000\002\046\006\000\002\046\010\000\002\047\005" +
    "\000\002\047\005\000\002\012\006\000\002\011\003\000" +
    "\002\013\007\000\002\013\007\000\002\024\005\000\002" +
    "\024\005\000\002\024\006\000\002\024\003\000\002\025" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\010" +
    "\000\002\023\010\000\002\023\012\000\002\026\010\000" +
    "\002\026\010\000\002\026\010\000\002\026\006\000\002" +
    "\030\007\000\002\030\007\000\002\030\007\000\002\030" +
    "\011\000\002\030\011\000\002\030\012\000\002\030\012" +
    "\000\002\030\007\000\002\040\005\000\002\040\012\000" +
    "\002\014\007\000\002\034\006\000\002\027\004\000\002" +
    "\033\006\000\002\033\006\000\002\033\006\000\002\033" +
    "\006\000\002\033\004\000\002\033\006\000\002\037\011" +
    "\000\002\037\007\000\002\037\010\000\002\037\006\000" +
    "\002\035\004\000\002\035\006\000\002\015\007\000\002" +
    "\015\013\000\002\015\011\000\002\015\013\000\002\015" +
    "\011\000\002\015\007\000\002\015\005\000\002\015\007" +
    "\000\002\015\013\000\002\015\011\000\002\015\013\000" +
    "\002\015\011\000\002\015\007\000\002\015\005\000\002" +
    "\017\004\000\002\017\007\000\002\020\004\000\002\020" +
    "\006\000\002\020\005\000\002\021\005\000\002\021\004" +
    "\000\002\050\003\000\002\022\004\000\002\022\006\000" +
    "\002\022\005\000\002\032\011\000\002\036\012\000\002" +
    "\041\005\000\002\041\005\000\002\041\007\000\002\041" +
    "\007\000\002\041\005\000\002\041\005\000\002\041\007" +
    "\000\002\041\007\000\002\042\007\000\002\042\007\000" +
    "\002\042\011\000\002\042\011\000\002\043\004\000\002" +
    "\043\004\000\002\045\004\000\002\044\012\000\002\044" +
    "\010\000\002\044\013\000\002\044\011\000\002\044\016" +
    "\000\002\063\003\000\002\061\003\000\002\061\005\000" +
    "\002\061\006\000\002\061\006\000\002\061\006\000\002" +
    "\061\006\000\002\061\011\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\004\000\002\065\002\000\002\061\006\000" +
    "\002\061\007\000\002\061\003\000\002\061\006\000\002" +
    "\061\006\000\002\061\004\000\002\061\005\000\002\061" +
    "\004\000\002\061\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\005\000\002\055\004\000\002" +
    "\055\010\000\002\055\006\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\004" +
    "\000\002\057\003\000\002\057\003\000\002\057\004\000" +
    "\002\057\003\000\002\062\005\000\002\062\006\000\002" +
    "\062\005\000\002\062\003\000\002\052\005\000\002\052" +
    "\003\000\002\066\002\000\002\051\010\000\002\067\002" +
    "\000\002\051\011\000\002\051\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\005\000\002\060\005\000\002" +
    "\060\003\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\004\000\002\060\003\000" +
    "\002\060\003\000\002\060\005\000\002\060\005\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\005\000\002\060\005\000" +
    "\002\060\004\000\002\060\004\000\002\060\004\000\002" +
    "\060\003\000\002\060\003\000\002\060\005\000\002\060" +
    "\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u020e\000\006\136\006\137\005\001\002\000\004\002" +
    "\u0210\001\002\000\062\011\351\026\017\053\155\054\102" +
    "\056\044\062\124\063\015\065\063\066\134\067\050\071" +
    "\157\075\143\076\135\102\144\103\140\105\065\106\145" +
    "\107\111\114\350\140\131\141\115\150\160\155\022\171" +
    "\130\001\002\000\170\006\126\011\047\024\051\026\017" +
    "\027\112\030\103\036\070\043\121\053\155\054\102\055" +
    "\064\056\044\057\077\060\041\062\124\063\015\065\063" +
    "\066\134\067\050\071\157\075\143\076\135\101\040\102" +
    "\144\103\140\105\065\106\145\107\111\114\146\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\140\131\141\115\142\120\146\036\150\160" +
    "\155\022\161\045\162\052\163\137\164\076\165\142\166" +
    "\156\167\056\170\055\171\130\172\016\173\046\174\025" +
    "\175\100\177\037\200\031\001\002\000\012\004\014\113" +
    "\010\136\013\137\012\001\002\000\002\001\ufffa\000\002" +
    "\001\ufffb\000\062\011\351\026\017\053\155\054\102\056" +
    "\044\062\124\063\015\065\063\066\134\067\050\071\157" +
    "\075\143\076\135\102\144\103\140\105\065\106\145\107" +
    "\111\114\350\140\131\141\115\150\160\155\022\171\130" +
    "\001\002\000\170\006\126\011\047\024\051\026\017\027" +
    "\112\030\103\036\070\043\121\053\155\054\102\055\064" +
    "\056\044\057\077\060\041\062\124\063\015\065\063\066" +
    "\134\067\050\071\157\075\143\076\135\101\040\102\144" +
    "\103\140\105\065\106\145\107\111\114\146\115\030\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\125\140\131\141\115\142\120\146\036\150\160\155" +
    "\022\161\045\162\052\163\137\164\076\165\142\166\156" +
    "\167\056\170\055\171\130\172\016\173\046\174\025\175" +
    "\100\177\037\200\031\001\002\000\002\001\000\000\004" +
    "\124\u0209\001\002\000\002\001\uff25\000\002\001\uffe9\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\014\015\275\017\272\023\273\157\270\160\274\001" +
    "\uff79\000\014\131\073\165\142\166\156\167\056\175\100" +
    "\001\002\000\002\001\uff2d\000\002\001\uff62\000\112\006" +
    "\126\011\170\024\051\027\112\030\103\036\070\043\121" +
    "\057\077\060\041\101\040\114\167\115\030\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\125" +
    "\142\120\146\036\161\045\162\052\163\137\164\076\165" +
    "\142\166\156\167\056\170\055\172\016\173\046\174\025" +
    "\175\100\177\037\200\031\001\002\000\012\004\u01fb\123" +
    "\353\132\354\133\355\001\002\000\042\005\201\006\174" +
    "\007\206\010\175\013\205\014\202\016\214\017\210\020" +
    "\176\021\211\022\200\031\203\033\177\045\212\047\207" +
    "\176\213\001\002\000\050\006\126\011\217\027\112\030" +
    "\103\036\070\101\040\114\216\131\073\146\036\161\045" +
    "\162\052\163\137\165\142\166\156\167\056\170\055\174" +
    "\221\175\100\177\037\001\002\000\050\006\126\011\217" +
    "\027\112\030\103\036\070\101\040\114\216\131\073\146" +
    "\036\161\045\162\052\163\137\165\142\166\156\167\056" +
    "\170\055\174\221\175\100\177\037\001\002\000\004\004" +
    "\u01f0\001\002\000\002\001\ufff0\000\002\001\uff3f\000\016" +
    "\126\u01e0\131\073\165\142\166\156\167\056\175\100\001" +
    "\002\000\014\131\073\165\142\166\156\167\056\175\100" +
    "\001\002\000\004\052\u01db\001\002\000\014\131\073\165" +
    "\142\166\156\167\056\175\100\001\002\000\112\006\126" +
    "\011\170\024\051\027\112\030\103\036\070\043\121\057" +
    "\077\060\041\101\040\114\167\115\030\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\125\142" +
    "\120\146\036\161\045\162\052\163\137\164\076\165\142" +
    "\166\156\167\056\170\055\172\016\173\046\174\025\175" +
    "\100\177\037\200\031\001\002\000\002\001\ufff5\000\002" +
    "\001\ufff2\000\002\001\uffe4\000\004\175\u01d8\001\uff52\000" +
    "\112\006\126\011\170\024\051\027\112\030\103\036\070" +
    "\043\121\057\077\060\041\101\040\114\167\115\030\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\125\142\120\146\036\161\045\162\052\163\137\164" +
    "\076\165\142\166\156\167\056\170\055\172\016\173\046" +
    "\174\025\175\100\177\037\200\031\001\002\000\166\006" +
    "\126\011\047\024\051\026\017\027\112\030\103\036\070" +
    "\043\121\053\155\054\102\056\044\057\077\060\041\062" +
    "\124\063\015\065\063\066\134\067\050\071\157\075\143" +
    "\076\135\101\040\102\144\103\140\105\065\106\145\107" +
    "\111\114\146\115\030\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\125\140\131\141\115\142" +
    "\120\146\036\150\160\155\022\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\171\130\172" +
    "\016\173\046\174\025\175\100\177\037\200\031\001\002" +
    "\000\004\124\u01d1\001\002\000\112\006\126\011\170\024" +
    "\051\027\112\030\103\036\070\043\121\057\077\060\041" +
    "\101\040\114\167\115\030\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\125\142\120\146\036" +
    "\161\045\162\052\163\137\164\076\165\142\166\156\167" +
    "\056\170\055\172\016\173\046\174\025\175\100\177\037" +
    "\200\031\001\002\000\002\001\uff51\000\002\001\uffff\000" +
    "\170\006\126\011\047\024\051\026\017\027\112\030\103" +
    "\036\070\043\121\053\155\054\102\055\064\056\044\057" +
    "\077\060\041\062\124\063\015\065\063\066\134\067\050" +
    "\071\157\075\143\076\135\101\040\102\144\103\140\105" +
    "\065\106\145\107\111\114\146\115\030\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\125\140" +
    "\131\141\115\142\120\146\036\150\160\155\022\161\045" +
    "\162\052\163\137\164\076\165\142\166\156\167\056\170" +
    "\055\171\130\172\016\173\046\174\025\175\100\177\037" +
    "\200\031\001\002\000\002\001\uff60\000\002\001\uff5c\000" +
    "\002\001\ufff4\000\006\157\u01c4\160\u01c5\001\uff22\000\002" +
    "\001\uffe1\000\002\001\uff2f\000\004\123\u01b8\001\002\000" +
    "\002\001\uffdf\000\014\131\073\165\142\166\156\167\056" +
    "\175\100\001\002\000\006\122\153\123\u01b2\001\002\000" +
    "\002\001\uff35\000\052\006\126\011\217\027\112\030\103" +
    "\036\070\037\u019c\101\040\114\216\131\073\146\036\161" +
    "\045\162\052\163\137\165\142\166\156\167\056\170\055" +
    "\174\221\175\100\177\037\001\002\000\002\001\uffec\000" +
    "\012\135\u0196\152\u0195\153\u0194\175\164\001\uff61\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\002\001\uffe0\000\002\001\uff68\000\002\001\uff24\000\112" +
    "\006\126\011\170\024\051\027\112\030\103\036\070\043" +
    "\121\057\077\060\041\101\040\114\167\115\030\116\151" +
    "\117\020\121\066\122\153\127\035\130\106\131\073\134" +
    "\125\142\120\146\036\161\045\162\052\163\137\164\076" +
    "\165\142\166\156\167\056\170\055\172\016\173\046\174" +
    "\025\175\100\177\037\200\031\001\002\000\004\046\u0135" +
    "\001\002\000\002\001\uffee\000\002\001\uffe8\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\002\001\uffeb\000\002\001\uffe2\000\112\006\126\011" +
    "\170\024\051\027\112\030\103\036\070\043\121\057\077" +
    "\060\041\101\040\114\167\115\030\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\125\142\120" +
    "\146\036\161\045\162\052\163\137\164\076\165\142\166" +
    "\156\167\056\170\055\172\016\173\046\174\025\175\100" +
    "\177\037\200\031\001\002\000\002\001\uff93\000\002\001" +
    "\ufff1\000\014\131\073\165\u0181\166\u0183\167\056\175\100" +
    "\001\002\000\050\006\126\011\217\027\112\030\103\036" +
    "\070\101\040\114\216\131\073\146\036\161\045\162\052" +
    "\163\137\165\142\166\156\167\056\170\055\174\221\175" +
    "\100\177\037\001\002\000\002\001\uffe5\000\002\001\uffef" +
    "\000\006\165\u017c\170\u017d\001\002\000\002\001\uff36\000" +
    "\002\001\uff2c\000\004\143\u0176\001\002\000\016\126\u0169" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\002\001\uff2e\000\002\001\uffed\000\004\123\u0164\001\002" +
    "\000\112\006\126\011\170\024\051\027\112\030\103\036" +
    "\070\043\121\057\077\060\041\101\040\114\167\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\142\120\146\036\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\172\016\173" +
    "\046\174\025\175\100\177\037\200\031\001\002\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\002\001\uffea\000\022\050\u011e\131\073\164\u0122" +
    "\165\u0121\166\u011c\167\u0120\174\u011f\175\100\001\002\000" +
    "\002\001\uffde\000\002\001\ufff3\000\002\001\uff2b\000\006" +
    "\123\u0148\124\u0147\001\002\000\112\006\126\011\170\024" +
    "\051\027\112\030\103\036\070\043\121\057\077\060\041" +
    "\101\040\114\167\115\030\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\125\142\120\146\036" +
    "\161\045\162\052\163\137\164\076\165\142\166\156\167" +
    "\056\170\055\172\016\173\046\174\025\175\100\177\037" +
    "\200\031\001\002\000\002\001\uff21\000\002\001\uff4f\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\002\001\uff78\000\002\001\uff5e\000\004\044\u0118\001" +
    "\002\000\014\131\073\165\142\166\156\167\056\175\100" +
    "\001\002\000\004\166\u0112\001\002\000\014\131\073\165" +
    "\142\166\317\167\056\175\100\001\002\000\002\001\uff31" +
    "\000\002\001\uff5f\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\002\001\uff30\000\014\131\073" +
    "\165\142\166\156\167\056\175\100\001\002\000\002\001" +
    "\uff32\000\002\001\uffd2\000\002\001\uff5d\000\006\072\327" +
    "\073\326\001\002\000\016\131\073\147\161\165\142\166" +
    "\156\167\056\175\100\001\002\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\006\151\163\175" +
    "\164\001\002\000\014\131\073\165\142\166\156\167\056" +
    "\175\100\001\002\000\002\001\uff5a\000\006\123\166\175" +
    "\164\001\uffab\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\014\131\073\165\142\166\317\167\056\175\100" +
    "\001\002\000\112\006\126\011\170\024\051\027\112\030" +
    "\103\036\070\043\121\057\077\060\041\101\040\114\167" +
    "\115\030\116\151\117\020\121\066\122\153\127\035\130" +
    "\106\131\073\134\125\142\120\146\036\161\045\162\052" +
    "\163\137\164\076\165\142\166\156\167\056\170\055\172" +
    "\016\173\046\174\025\175\100\177\037\200\031\001\002" +
    "\000\002\001\uffac\000\016\012\271\015\275\017\272\023" +
    "\273\157\270\160\274\001\002\000\044\005\201\006\174" +
    "\007\206\010\175\012\204\013\205\014\202\016\214\017" +
    "\210\020\176\021\211\022\200\031\203\033\177\045\212" +
    "\047\207\176\213\001\002\000\050\006\126\011\217\027" +
    "\112\030\103\036\070\101\040\114\216\131\073\146\036" +
    "\161\045\162\052\163\137\165\142\166\156\167\056\170" +
    "\055\174\221\175\100\177\037\001\002\000\050\006\126" +
    "\011\217\027\112\030\103\036\070\101\040\114\216\131" +
    "\073\146\036\161\045\162\052\163\137\165\142\166\156" +
    "\167\056\170\055\174\221\175\100\177\037\001\002\000" +
    "\050\006\126\011\217\027\112\030\103\036\070\101\040" +
    "\114\216\131\073\146\036\161\045\162\052\163\137\165" +
    "\142\166\156\167\056\170\055\174\221\175\100\177\037" +
    "\001\002\000\004\161\260\001\002\000\050\006\126\011" +
    "\217\027\112\030\103\036\070\101\040\114\216\131\073" +
    "\146\036\161\045\162\052\163\137\165\142\166\156\167" +
    "\056\170\055\174\221\175\100\177\037\001\002\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\050\006\126\011\217\027\112\030\103\036\070" +
    "\101\040\114\216\131\073\146\036\161\045\162\052\163" +
    "\137\165\142\166\156\167\056\170\055\174\221\175\100" +
    "\177\037\001\002\000\050\006\126\011\217\027\112\030" +
    "\103\036\070\101\040\114\216\131\073\146\036\161\045" +
    "\162\052\163\137\165\142\166\156\167\056\170\055\174" +
    "\221\175\100\177\037\001\002\000\002\001\uff77\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\050\006\126\011\217\027\112\030\103\036\070" +
    "\101\040\114\216\131\073\146\036\161\045\162\052\163" +
    "\137\165\142\166\156\167\056\170\055\174\221\175\100" +
    "\177\037\001\002\000\004\046\247\001\002\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\050\006\126\011\217\027\112\030\103\036\070\101" +
    "\040\114\216\131\073\146\036\161\045\162\052\163\137" +
    "\165\142\166\156\167\056\170\055\174\221\175\100\177" +
    "\037\001\002\000\004\046\231\001\002\000\002\001\uff27" +
    "\000\050\006\126\011\217\027\112\030\103\036\070\101" +
    "\040\114\216\131\073\146\036\161\045\162\052\163\137" +
    "\165\142\166\156\167\056\170\055\174\221\175\100\177" +
    "\037\001\002\000\006\045\212\047\207\001\uff6e\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\050\006\126\011\217\027\112\030\103\036\070\101\040" +
    "\114\216\131\073\146\036\161\045\162\052\163\137\165" +
    "\142\166\156\167\056\170\055\174\221\175\100\177\037" +
    "\001\002\000\006\135\223\175\164\001\uff61\000\014\131" +
    "\073\165\142\166\156\167\056\175\100\001\002\000\004" +
    "\175\164\001\uff65\000\050\006\126\011\217\027\112\030" +
    "\103\036\070\101\040\114\216\131\073\146\036\161\045" +
    "\162\052\163\137\165\142\166\156\167\056\170\055\174" +
    "\221\175\100\177\037\001\002\000\002\001\uff64\000\026" +
    "\005\201\006\174\007\206\010\175\012\204\016\214\031" +
    "\203\033\177\045\212\047\207\001\002\000\004\175\164" +
    "\001\uff6b\000\050\006\126\011\217\027\112\030\103\036" +
    "\070\101\040\114\216\131\073\146\036\161\045\162\052" +
    "\163\137\165\142\166\156\167\056\170\055\174\221\175" +
    "\100\177\037\001\002\000\024\005\201\006\174\007\206" +
    "\010\175\016\214\031\203\033\177\045\212\047\207\001" +
    "\uff6a\000\004\175\232\001\002\000\002\001\uff67\000\024" +
    "\005\201\006\174\007\206\010\175\016\214\031\203\033" +
    "\177\045\212\047\207\001\uff3c\000\026\005\201\006\174" +
    "\007\206\010\175\016\214\025\uff48\031\203\033\177\045" +
    "\212\047\207\001\uff3e\000\004\025\236\001\002\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\030\005\201\006\174\007\206\010\175\015\242" +
    "\016\214\025\241\031\203\033\177\045\212\047\207\001" +
    "\uff4b\000\002\001\uff47\000\052\006\126\011\217\015\244" +
    "\027\112\030\103\036\070\101\040\114\216\131\073\146" +
    "\036\161\045\162\052\163\137\165\142\166\156\167\056" +
    "\170\055\174\221\175\100\177\037\001\002\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\002\001\uff4c\000\050\006\126\011\217\027\112\030" +
    "\103\036\070\101\040\114\216\131\073\146\036\161\045" +
    "\162\052\163\137\165\142\166\156\167\056\170\055\174" +
    "\221\175\100\177\037\001\002\000\002\001\uff4e\000\002" +
    "\001\uff4d\000\004\175\250\001\002\000\002\001\uff66\000" +
    "\006\045\212\047\207\001\uff71\000\024\005\201\006\174" +
    "\007\206\010\175\016\214\031\203\033\177\045\212\047" +
    "\207\001\uff41\000\026\005\201\006\174\007\206\010\175" +
    "\016\214\031\203\032\254\033\177\045\212\047\207\001" +
    "\002\000\002\001\uff74\000\024\005\201\006\174\007\206" +
    "\010\175\016\214\031\203\033\177\045\212\047\207\001" +
    "\uff40\000\014\007\206\010\175\016\214\045\212\047\207" +
    "\001\uff6f\000\024\005\201\006\174\007\206\010\175\016" +
    "\214\031\203\033\177\045\212\047\207\001\uff3b\000\004" +
    "\034\261\001\002\000\004\031\262\001\uff73\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\026\005\201\006\174\007\206\010\175\016\214\031" +
    "\203\032\264\033\177\045\212\047\207\001\002\000\002" +
    "\001\uff72\000\024\005\201\006\174\007\206\010\175\016" +
    "\214\031\203\033\177\045\212\047\207\001\uff3d\000\006" +
    "\045\212\047\207\001\uff70\000\014\007\206\010\175\016" +
    "\214\045\212\047\207\001\uff6d\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\002\001\uff29\000" +
    "\112\006\126\011\170\024\051\027\112\030\103\036\070" +
    "\043\121\057\077\060\041\101\040\114\167\115\030\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\125\142\120\146\036\161\045\162\052\163\137\164" +
    "\076\165\142\166\156\167\056\170\055\172\016\173\046" +
    "\174\025\175\100\177\037\200\031\001\002\000\112\006" +
    "\126\011\170\024\051\027\112\030\103\036\070\043\121" +
    "\057\077\060\041\101\040\114\167\115\030\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\125" +
    "\142\120\146\036\161\045\162\052\163\137\164\076\165" +
    "\142\166\156\167\056\170\055\172\016\173\046\174\025" +
    "\175\100\177\037\200\031\001\002\000\014\131\073\165" +
    "\142\166\156\167\056\175\100\001\002\000\112\006\126" +
    "\011\170\024\051\027\112\030\103\036\070\043\121\057" +
    "\077\060\041\101\040\114\167\115\030\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\125\142" +
    "\120\146\036\161\045\162\052\163\137\164\076\165\142" +
    "\166\156\167\056\170\055\172\016\173\046\174\025\175" +
    "\100\177\037\200\031\001\002\000\006\017\272\023\273" +
    "\001\uff38\000\010\123\301\124\300\175\164\001\uff8c\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\112\006\126\011\170\024\051\027\112\030\103\036" +
    "\070\043\121\057\077\060\041\101\040\114\167\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\142\120\146\036\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\172\016\173" +
    "\046\174\025\175\100\177\037\200\031\001\002\000\010" +
    "\015\275\017\272\023\273\001\uff84\000\006\123\304\175" +
    "\164\001\uff8a\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\010\015\275\017\272\023\273\001\uff82\000\004" +
    "\017\272\001\uff39\000\002\001\uff3a\000\010\123\312\124" +
    "\311\175\164\001\uff8d\000\014\131\073\165\142\166\156" +
    "\167\056\175\100\001\002\000\112\006\126\011\170\024" +
    "\051\027\112\030\103\036\070\043\121\057\077\060\041" +
    "\101\040\114\167\115\030\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\125\142\120\146\036" +
    "\161\045\162\052\163\137\164\076\165\142\166\156\167" +
    "\056\170\055\172\016\173\046\174\025\175\100\177\037" +
    "\200\031\001\002\000\010\015\275\017\272\023\273\001" +
    "\uff85\000\006\123\315\175\164\001\uff8b\000\112\006\126" +
    "\011\170\024\051\027\112\030\103\036\070\043\121\057" +
    "\077\060\041\101\040\114\167\115\030\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\125\142" +
    "\120\146\036\161\045\162\052\163\137\164\076\165\142" +
    "\166\156\167\056\170\055\172\016\173\046\174\025\175" +
    "\100\177\037\200\031\001\002\000\010\015\275\017\272" +
    "\023\273\001\uff83\000\070\006\126\011\170\024\051\036" +
    "\070\043\121\057\077\060\041\114\167\115\030\116\151" +
    "\117\020\121\066\122\153\127\035\130\106\131\073\134" +
    "\125\142\120\164\076\165\142\166\156\167\056\172\016" +
    "\173\046\174\025\175\100\200\031\001\uff5d\000\010\015" +
    "\275\017\272\023\273\001\uff2a\000\006\151\322\175\164" +
    "\001\002\000\014\131\073\165\142\166\156\167\056\175" +
    "\100\001\002\000\006\123\324\175\164\001\uffad\000\112" +
    "\006\126\011\170\024\051\027\112\030\103\036\070\043" +
    "\121\057\077\060\041\101\040\114\167\115\030\116\151" +
    "\117\020\121\066\122\153\127\035\130\106\131\073\134" +
    "\125\142\120\146\036\161\045\162\052\163\137\164\076" +
    "\165\142\166\156\167\056\170\055\172\016\173\046\174" +
    "\025\175\100\177\037\200\031\001\002\000\002\001\uffae" +
    "\000\014\131\073\165\142\166\156\167\056\175\100\001" +
    "\002\000\014\131\073\165\142\166\156\167\056\175\100" +
    "\001\002\000\006\074\331\175\164\001\002\000\014\131" +
    "\073\165\142\166\156\167\056\175\100\001\002\000\004" +
    "\175\164\001\uffd1\000\006\074\334\175\164\001\002\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\004\175\164\001\uffd0\000\010\122\153\123\337\175" +
    "\164\001\uff92\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\002\001\uff90\000\002\001\uff91\000\006\112\343" +
    "\175\164\001\uff9a\000\004\123\344\001\002\000\112\006" +
    "\126\011\170\024\051\027\112\030\103\036\070\043\121" +
    "\057\077\060\041\101\040\114\167\115\030\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\125" +
    "\142\120\146\036\161\045\162\052\163\137\164\076\165" +
    "\142\166\156\167\056\170\055\172\016\173\046\174\025" +
    "\175\100\177\037\200\031\001\002\000\002\001\uff99\000" +
    "\044\006\uff6b\027\uff6b\030\uff6b\036\uff6b\101\uff6b\131\uff6b" +
    "\146\uff6b\161\uff6b\162\uff6b\163\uff6b\165\uff6b\166\uff6b\167" +
    "\uff6b\170\uff6b\174\uff6b\175\164\177\uff6b\001\uffe7\000\062" +
    "\011\351\026\017\053\155\054\102\056\044\062\124\063" +
    "\015\065\063\066\134\067\050\071\157\075\143\076\135" +
    "\102\144\103\140\105\065\106\145\107\111\114\350\140" +
    "\131\141\115\150\160\155\022\171\130\001\002\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\062\011\351\026\017\053\155\054\102\056\044\062\124" +
    "\063\015\065\063\066\134\067\050\071\157\075\143\076" +
    "\135\102\144\103\140\105\065\106\145\107\111\114\350" +
    "\140\131\141\115\150\160\155\022\171\130\001\002\000" +
    "\010\123\353\132\354\133\355\001\uffe6\000\014\131\073" +
    "\165\142\166\156\167\056\175\100\001\002\000\014\131" +
    "\073\165\142\166\156\167\056\175\100\001\002\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\010\023\360\124\357\175\164\001\uff9b\000\014\131\073" +
    "\165\142\166\156\167\056\175\100\001\002\000\014\131" +
    "\073\165\142\166\156\167\056\175\100\001\002\000\006" +
    "\124\362\175\164\001\002\000\014\131\073\165\142\166" +
    "\156\167\056\175\100\001\002\000\010\123\364\125\365" +
    "\175\164\001\uff9d\000\112\006\126\011\170\024\051\027" +
    "\112\030\103\036\070\043\121\057\077\060\041\101\040" +
    "\114\167\115\030\116\151\117\020\121\066\122\153\127" +
    "\035\130\106\131\073\134\125\142\120\146\036\161\045" +
    "\162\052\163\137\164\076\165\142\166\156\167\056\170" +
    "\055\172\016\173\046\174\025\175\100\177\037\200\031" +
    "\001\002\000\014\131\073\165\142\166\156\167\056\175" +
    "\100\001\002\000\004\175\164\001\uffa0\000\002\001\uff9e" +
    "\000\006\123\371\175\164\001\uff9c\000\112\006\126\011" +
    "\170\024\051\027\112\030\103\036\070\043\121\057\077" +
    "\060\041\101\040\114\167\115\030\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\125\142\120" +
    "\146\036\161\045\162\052\163\137\164\076\165\142\166" +
    "\156\167\056\170\055\172\016\173\046\174\025\175\100" +
    "\177\037\200\031\001\002\000\002\001\uff9f\000\014\023" +
    "\375\123\376\124\374\125\377\175\164\001\uffa2\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\112\006\126\011\170\024\051\027\112\030\103\036" +
    "\070\043\121\057\077\060\041\101\040\114\167\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\142\120\146\036\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\172\016\173" +
    "\046\174\025\175\100\177\037\200\031\001\002\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\004\175\164\001\uffa8\000\002\001\uffa1\000\006\124\u0103" +
    "\175\164\001\002\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\010\123\u0105\125\u0106\175\164" +
    "\001\uffa4\000\112\006\126\011\170\024\051\027\112\030" +
    "\103\036\070\043\121\057\077\060\041\101\040\114\167" +
    "\115\030\116\151\117\020\121\066\122\153\127\035\130" +
    "\106\131\073\134\125\142\120\146\036\161\045\162\052" +
    "\163\137\164\076\165\142\166\156\167\056\170\055\172" +
    "\016\173\046\174\025\175\100\177\037\200\031\001\002" +
    "\000\014\131\073\165\142\166\156\167\056\175\100\001" +
    "\002\000\004\175\164\001\uffa7\000\002\001\uffa5\000\006" +
    "\123\u010a\175\164\001\uffa3\000\112\006\126\011\170\024" +
    "\051\027\112\030\103\036\070\043\121\057\077\060\041" +
    "\101\040\114\167\115\030\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\125\142\120\146\036" +
    "\161\045\162\052\163\137\164\076\165\142\166\156\167" +
    "\056\170\055\172\016\173\046\174\025\175\100\177\037" +
    "\200\031\001\002\000\002\001\uffa6\000\006\120\u010d\175" +
    "\164\001\002\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\002\001\uffb7\000\012\012\u0110\123\353\132\354" +
    "\133\355\001\002\000\002\001\uffe3\000\004\175\164\001" +
    "\uffe7\000\004\111\u0113\001\uffaa\000\062\011\351\026\017" +
    "\053\155\054\102\056\044\062\124\063\015\065\063\066" +
    "\134\067\050\071\157\075\143\076\135\102\144\103\140" +
    "\105\065\106\145\107\111\114\350\140\131\141\115\150" +
    "\160\155\022\171\130\001\002\000\010\123\353\132\354" +
    "\133\355\001\uffa9\000\006\110\u0116\175\164\001\002\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\004\175\164\001\uffb6\000\014\131\073\165\142\166" +
    "\156\167\056\175\100\001\002\000\006\100\u011a\175\164" +
    "\001\002\000\022\050\u011e\131\073\164\u0122\165\u0121\166" +
    "\u011c\167\u0120\174\u011f\175\100\001\002\000\004\025\u012e" +
    "\001\uffba\000\004\017\uff55\001\uff5d\000\006\135\u0137\175" +
    "\164\001\002\000\004\174\u0131\001\002\000\022\050\u011e" +
    "\131\073\164\u0122\165\u0121\166\u011c\167\u0120\174\u011f\175" +
    "\100\001\002\000\004\017\uff54\001\uff5c\000\004\017\uff57" +
    "\001\uff5e\000\002\001\uff56\000\006\017\u0125\175\u0126\001" +
    "\002\000\002\001\uffdc\000\112\006\126\011\170\024\051" +
    "\027\112\030\103\036\070\043\121\057\077\060\041\101" +
    "\040\114\167\115\030\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\125\142\120\146\u0127\161" +
    "\045\162\052\163\137\164\076\165\142\166\156\167\056" +
    "\170\055\172\016\173\046\174\025\175\100\177\037\200" +
    "\031\001\002\000\002\001\uff53\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\002\001\uffd4\000" +
    "\042\005\201\006\174\007\206\010\175\013\205\014\202" +
    "\016\214\017\210\020\176\021\211\022\200\031\203\033" +
    "\177\045\212\047\207\176\213\001\uffd5\000\006\123\u012b" +
    "\175\164\001\uff7f\000\112\006\126\011\170\024\051\027" +
    "\112\030\103\036\070\043\121\057\077\060\041\101\040" +
    "\114\167\115\030\116\151\117\020\121\066\122\153\127" +
    "\035\130\106\131\073\134\125\142\120\146\036\161\045" +
    "\162\052\163\137\164\076\165\142\166\156\167\056\170" +
    "\055\172\016\173\046\174\025\175\100\177\037\200\031" +
    "\001\002\000\002\001\uffd6\000\002\001\uffd9\000\004\171" +
    "\u012f\001\002\000\022\050\u011e\131\073\164\u0122\165\u0121" +
    "\166\u011c\167\u0120\174\u011f\175\100\001\002\000\004\025" +
    "\u012e\001\uffd7\000\014\131\073\165\142\166\156\167\056" +
    "\175\100\001\002\000\022\050\u011e\131\073\164\u0122\165" +
    "\u0121\166\u011c\167\u0120\174\u011f\175\u0134\001\002\000\002" +
    "\001\uffd8\000\004\046\u0135\001\uff5a\000\014\131\073\165" +
    "\142\166\156\167\056\175\100\001\002\000\004\175\164" +
    "\001\uff5b\000\016\131\073\164\u0122\165\u0121\166\u011c\167" +
    "\u0120\175\100\001\002\000\006\135\u013c\175\164\001\002" +
    "\000\006\017\u013b\175\u0126\001\002\000\002\001\uffdb\000" +
    "\112\006\126\011\170\024\051\027\112\030\103\036\070" +
    "\043\121\057\077\060\041\101\040\114\167\115\030\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\125\142\120\146\036\161\045\162\052\163\137\164" +
    "\076\165\142\166\156\167\056\170\055\172\016\173\046" +
    "\174\025\175\100\177\037\200\031\001\002\000\012\164" +
    "\u0122\165\u013d\166\u0140\167\u013f\001\002\000\002\001\uff57" +
    "\000\002\001\uffda\000\002\001\uff54\000\002\001\uff55\000" +
    "\006\104\u0142\175\164\001\002\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\004\175\164\001" +
    "\uffb4\000\004\077\u0145\001\002\000\062\011\351\026\017" +
    "\053\155\054\102\056\044\062\124\063\015\065\063\066" +
    "\134\067\050\071\157\075\143\076\135\102\144\103\140" +
    "\105\065\106\145\107\111\114\350\140\131\141\115\150" +
    "\160\155\022\171\130\001\002\000\010\123\353\132\354" +
    "\133\355\001\uffd3\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\112\006\126\011\170\024\051" +
    "\027\112\030\103\036\070\043\121\057\077\060\041\101" +
    "\040\114\167\115\030\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\125\142\120\146\036\161" +
    "\045\162\052\163\137\164\076\165\142\166\156\167\056" +
    "\170\055\172\016\173\046\174\025\175\100\177\037\200" +
    "\031\001\002\000\004\100\u014a\001\002\000\022\050\u011e" +
    "\131\073\164\u0122\165\u0121\166\u011c\167\u0120\174\u011f\175" +
    "\100\001\002\000\004\025\u012e\001\uffbf\000\006\123\u014d" +
    "\175\164\001\002\000\112\006\126\011\170\024\051\027" +
    "\112\030\103\036\070\043\121\057\077\060\041\101\040" +
    "\114\167\115\030\116\151\117\020\121\066\122\153\127" +
    "\035\130\106\131\073\134\125\142\120\146\036\161\045" +
    "\162\052\163\137\164\076\165\142\166\156\167\056\170" +
    "\055\172\016\173\046\174\025\175\100\177\037\200\031" +
    "\001\002\000\004\100\u014f\001\002\000\022\050\u011e\131" +
    "\073\164\u0122\165\u0121\166\u011c\167\u0120\174\u011f\175\100" +
    "\001\002\000\004\025\u012e\001\uffbe\000\004\025\u012e\001" +
    "\uffdd\000\002\001\uff6c\000\010\015\u015e\025\u015c\061\u015d" +
    "\001\002\000\004\144\u0156\001\002\000\042\005\201\006" +
    "\174\007\206\010\175\013\205\014\202\016\214\017\210" +
    "\020\176\021\211\022\200\031\203\033\177\045\212\047" +
    "\207\176\213\001\uffcc\000\014\131\073\165\142\166\156" +
    "\167\056\175\100\001\002\000\006\124\u0158\175\164\001" +
    "\002\000\014\131\073\165\142\166\156\167\056\175\100" +
    "\001\002\000\006\123\u015a\175\164\001\002\000\112\006" +
    "\126\011\170\024\051\027\112\030\103\036\070\043\121" +
    "\057\077\060\041\101\040\114\167\115\030\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\125" +
    "\142\120\146\036\161\045\162\052\163\137\164\076\165" +
    "\142\166\156\167\056\170\055\172\016\173\046\174\025" +
    "\175\100\177\037\200\031\001\002\000\002\001\uff8e\000" +
    "\052\006\126\011\217\015\u0162\027\112\030\103\036\070" +
    "\101\040\114\216\131\073\146\036\161\045\162\052\163" +
    "\137\165\142\166\156\167\056\170\055\174\221\175\100" +
    "\177\037\001\002\000\050\006\126\011\217\027\112\030" +
    "\103\036\070\101\040\114\216\131\073\146\036\161\045" +
    "\162\052\163\137\165\142\166\156\167\056\170\055\174" +
    "\221\175\100\177\037\001\002\000\050\006\126\011\217" +
    "\027\112\030\103\036\070\101\040\114\216\131\073\146" +
    "\036\161\045\162\052\163\137\165\142\166\156\167\056" +
    "\170\055\174\221\175\100\177\037\001\002\000\024\005" +
    "\201\006\174\007\206\010\175\016\214\031\203\033\177" +
    "\045\212\047\207\001\uffcf\000\024\005\201\006\174\007" +
    "\206\010\175\016\214\031\203\033\177\045\212\047\207" +
    "\001\uffcb\000\024\005\201\006\174\007\206\010\175\016" +
    "\214\031\203\033\177\045\212\047\207\001\uffce\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\024\005\201\006\174\007\206\010\175\016\214" +
    "\031\203\033\177\045\212\047\207\001\uffcd\000\112\006" +
    "\126\011\170\024\051\027\112\030\103\036\070\043\121" +
    "\057\077\060\041\101\040\114\167\115\030\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\125" +
    "\142\120\146\036\161\045\162\052\163\137\164\076\165" +
    "\142\166\156\167\056\170\055\172\016\173\046\174\025" +
    "\175\100\177\037\200\031\001\002\000\004\100\u0166\001" +
    "\002\000\022\050\u011e\131\073\164\u0122\165\u0121\166\u011c" +
    "\167\u0120\174\u011f\175\100\001\002\000\004\025\u012e\001" +
    "\uffc1\000\010\044\u016e\124\u016f\175\164\001\002\000\004" +
    "\124\u016a\001\002\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\006\123\u016c\175\164\001\uffc2" +
    "\000\112\006\126\011\170\024\051\027\112\030\103\036" +
    "\070\043\121\057\077\060\041\101\040\114\167\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\142\120\146\036\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\172\016\173" +
    "\046\174\025\175\100\177\037\200\031\001\002\000\002" +
    "\001\uffc3\000\014\131\073\165\142\166\156\167\056\175" +
    "\100\001\002\000\014\131\073\165\142\166\156\167\056" +
    "\175\100\001\002\000\006\123\u0171\175\164\001\002\000" +
    "\112\006\126\011\170\024\051\027\112\030\103\036\070" +
    "\043\121\057\077\060\041\101\040\114\167\115\030\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\125\142\120\146\036\161\045\162\052\163\137\164" +
    "\076\165\142\166\156\167\056\170\055\172\016\173\046" +
    "\174\025\175\100\177\037\200\031\001\002\000\002\001" +
    "\uffc4\000\006\123\u0174\175\164\001\002\000\112\006\126" +
    "\011\170\024\051\027\112\030\103\036\070\043\121\057" +
    "\077\060\041\101\040\114\167\115\030\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\125\142" +
    "\120\146\036\161\045\162\052\163\137\164\076\165\142" +
    "\166\156\167\056\170\055\172\016\173\046\174\025\175" +
    "\100\177\037\200\031\001\002\000\002\001\uffc5\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\006\145\u0178\175\164\001\002\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\006\123\u017a\175" +
    "\164\001\002\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\002\001\uff8f\000\002\001\uff80\000\002\001\uff81" +
    "\000\026\005\201\006\174\007\206\010\175\015\u017f\016" +
    "\214\031\203\033\177\045\212\047\207\001\002\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\024\005\201\006\174\007\206\010\175\016\214" +
    "\031\203\033\177\045\212\047\207\001\uff75\000\004\110" +
    "\u0188\001\uff5e\000\006\154\u0187\175\164\001\002\000\004" +
    "\110\u0184\001\uff5d\000\006\166\u0186\167\u0185\001\002\000" +
    "\002\001\uffb2\000\002\001\uffb3\000\002\001\uffb9\000\004" +
    "\167\u0189\001\002\000\002\001\uffb1\000\002\001\uffb5\000" +
    "\026\005\201\006\174\007\206\010\175\015\u018c\016\214" +
    "\031\203\033\177\045\212\047\207\001\002\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\024\005\201\006\174\007\206\010\175\016\214\031" +
    "\203\033\177\045\212\047\207\001\uff76\000\014\015\275" +
    "\017\272\023\273\157\270\160\274\001\uff43\000\006\132" +
    "\u0190\175\164\001\002\000\014\131\073\165\142\166\156" +
    "\167\056\175\100\001\002\000\006\123\u0192\175\164\001" +
    "\uff58\000\112\006\126\011\170\024\051\027\112\030\103" +
    "\036\070\043\121\057\077\060\041\101\040\114\167\115" +
    "\030\116\151\117\020\121\066\122\153\127\035\130\106" +
    "\131\073\134\125\142\120\146\036\161\045\162\052\163" +
    "\137\164\076\165\142\166\156\167\056\170\055\172\016" +
    "\173\046\174\025\175\100\177\037\200\031\001\002\000" +
    "\002\001\uff59\000\014\131\073\165\142\166\156\167\056" +
    "\175\100\001\002\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\112\006\126\011\170\024\051" +
    "\027\112\030\103\036\070\043\121\057\077\060\041\101" +
    "\040\114\167\115\030\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\125\142\120\146\036\161" +
    "\045\162\052\163\137\164\076\165\142\166\156\167\056" +
    "\170\055\172\016\173\046\174\025\175\100\177\037\200" +
    "\031\001\002\000\002\001\uff23\000\002\001\uff64\000\004" +
    "\175\164\001\uff34\000\004\175\164\001\uff33\000\026\005" +
    "\201\006\174\007\206\010\175\016\214\031\203\033\177" +
    "\040\u01a4\045\212\047\207\001\002\000\050\006\126\011" +
    "\217\027\112\030\103\036\070\101\040\114\216\131\073" +
    "\146\036\161\045\162\052\163\137\165\142\166\156\167" +
    "\056\170\055\174\221\175\100\177\037\001\002\000\026" +
    "\005\201\006\174\007\206\010\175\016\214\031\203\033" +
    "\177\040\u019e\045\212\047\207\001\002\000\050\006\126" +
    "\011\217\027\112\030\103\036\070\101\040\114\216\131" +
    "\073\146\036\161\045\162\052\163\137\165\142\166\156" +
    "\167\056\170\055\174\221\175\100\177\037\001\002\000" +
    "\026\005\201\006\174\007\206\010\175\016\214\031\203" +
    "\033\177\041\u01a0\045\212\047\207\001\002\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\026\005\201\006\174\007\206\010\175\016\214\031" +
    "\203\033\177\042\u01a2\045\212\047\207\001\uff7b\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\024\005\201\006\174\007\206\010\175\016\214" +
    "\031\203\033\177\045\212\047\207\001\uff7c\000\050\006" +
    "\126\011\217\027\112\030\103\036\070\101\040\114\216" +
    "\131\073\146\036\161\045\162\052\163\137\165\142\166" +
    "\156\167\056\170\055\174\221\175\100\177\037\001\002" +
    "\000\030\005\201\006\174\007\206\010\175\016\214\023" +
    "\u01a6\031\203\033\177\041\u01a7\045\212\047\207\001\002" +
    "\000\050\006\126\011\217\027\112\030\103\036\070\101" +
    "\040\114\216\131\073\146\036\161\045\162\052\163\137" +
    "\165\142\166\156\167\056\170\055\174\221\175\100\177" +
    "\037\001\002\000\050\006\126\011\217\027\112\030\103" +
    "\036\070\101\040\114\216\131\073\146\036\161\045\162" +
    "\052\163\137\165\142\166\156\167\056\170\055\174\221" +
    "\175\100\177\037\001\002\000\026\005\201\006\174\007" +
    "\206\010\175\016\214\031\203\033\177\042\u01a9\045\212" +
    "\047\207\001\uff7d\000\050\006\126\011\217\027\112\030" +
    "\103\036\070\101\040\114\216\131\073\146\036\161\045" +
    "\162\052\163\137\165\142\166\156\167\056\170\055\174" +
    "\221\175\100\177\037\001\002\000\024\005\201\006\174" +
    "\007\206\010\175\016\214\031\203\033\177\045\212\047" +
    "\207\001\uff7e\000\026\005\201\006\174\007\206\010\175" +
    "\016\214\031\203\033\177\041\u01ac\045\212\047\207\001" +
    "\002\000\050\006\126\011\217\027\112\030\103\036\070" +
    "\101\040\114\216\131\073\146\036\161\045\162\052\163" +
    "\137\165\142\166\156\167\056\170\055\174\221\175\100" +
    "\177\037\001\002\000\026\005\201\006\174\007\206\010" +
    "\175\016\214\031\203\033\177\042\u01ae\045\212\047\207" +
    "\001\002\000\050\006\126\011\217\027\112\030\103\036" +
    "\070\101\040\114\216\131\073\146\036\161\045\162\052" +
    "\163\137\165\142\166\156\167\056\170\055\174\221\175" +
    "\100\177\037\001\002\000\026\005\201\006\174\007\206" +
    "\010\175\016\214\031\203\033\177\045\212\047\207\051" +
    "\u01b0\001\002\000\050\006\126\011\217\027\112\030\103" +
    "\036\070\101\040\114\216\131\073\146\036\161\045\162" +
    "\052\163\137\165\142\166\156\167\056\170\055\174\221" +
    "\175\100\177\037\001\002\000\024\005\201\006\174\007" +
    "\206\010\175\016\214\031\203\033\177\045\212\047\207" +
    "\001\uff7a\000\112\006\126\011\170\024\051\027\112\030" +
    "\103\036\070\043\121\057\077\060\041\101\040\114\167" +
    "\115\030\116\151\117\020\121\066\122\153\127\035\130" +
    "\106\131\073\134\125\142\120\146\036\161\045\162\052" +
    "\163\137\164\076\165\142\166\156\167\056\170\055\172" +
    "\016\173\046\174\025\175\100\177\037\200\031\001\002" +
    "\000\002\001\uff94\000\002\001\uff95\000\006\111\u01b6\175" +
    "\164\001\uffb0\000\062\011\351\026\017\053\155\054\102" +
    "\056\044\062\124\063\015\065\063\066\134\067\050\071" +
    "\157\075\143\076\135\102\144\103\140\105\065\106\145" +
    "\107\111\114\350\140\131\141\115\150\160\155\022\171" +
    "\130\001\002\000\010\123\353\132\354\133\355\001\uffaf" +
    "\000\112\006\126\011\170\024\051\027\112\030\103\036" +
    "\070\043\121\057\077\060\041\101\040\114\167\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\142\120\146\036\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\172\016\173" +
    "\046\174\025\175\100\177\037\200\031\001\002\000\006" +
    "\064\u01bb\070\u01ba\001\002\000\004\124\u01c0\001\002\000" +
    "\004\124\u01bc\001\002\000\014\131\073\165\142\166\156" +
    "\167\056\175\100\001\002\000\006\100\u01be\175\164\001" +
    "\002\000\022\050\u011e\131\073\164\u0122\165\u0121\166\u011c" +
    "\167\u0120\174\u011f\175\100\001\002\000\004\025\u012e\001" +
    "\uffbc\000\014\131\073\165\142\166\156\167\056\175\100" +
    "\001\002\000\006\100\u01c2\175\164\001\002\000\022\050" +
    "\u011e\131\073\164\u0122\165\u0121\166\u011c\167\u0120\174\u011f" +
    "\175\100\001\002\000\004\025\u012e\001\uffbb\000\014\131" +
    "\073\165\142\166\156\167\056\175\100\001\002\000\014" +
    "\131\073\165\142\166\156\167\056\175\100\001\002\000" +
    "\006\124\u01c7\175\164\001\uff88\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\004\175\164\001" +
    "\uff86\000\006\124\u01ca\175\164\001\uff89\000\014\131\073" +
    "\165\142\166\156\167\056\175\100\001\002\000\004\175" +
    "\164\001\uff87\000\012\004\u01cf\123\353\132\354\133\355" +
    "\001\002\000\004\004\u01ce\001\002\000\002\001\ufff9\000" +
    "\002\001\ufff7\000\002\001\uff37\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\006\123\u01d3\175" +
    "\164\001\002\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\004\100\u01d5\001\002\000\022\050\u011e\131\073" +
    "\164\u0122\165\u0121\166\u011c\167\u0120\174\u011f\175\100\001" +
    "\002\000\004\025\u012e\001\uffbd\000\014\015\275\017\272" +
    "\023\273\157\270\160\274\001\uff28\000\002\001\uff50\000" +
    "\014\015\275\017\272\023\273\157\270\160\274\001\uff42" +
    "\000\004\175\164\001\uff63\000\050\006\126\011\217\027" +
    "\112\030\103\036\070\101\040\114\216\131\073\146\036" +
    "\161\045\162\052\163\137\165\142\166\156\167\056\170" +
    "\055\174\221\175\100\177\037\001\002\000\026\005\201" +
    "\006\174\007\206\010\175\016\214\023\u01dd\031\203\033" +
    "\177\045\212\047\207\001\002\000\050\006\126\011\217" +
    "\027\112\030\103\036\070\101\040\114\216\131\073\146" +
    "\036\161\045\162\052\163\137\165\142\166\156\167\056" +
    "\170\055\174\221\175\100\177\037\001\002\000\024\005" +
    "\201\006\174\007\206\010\175\016\214\031\203\033\177" +
    "\045\212\047\207\001\uff69\000\004\175\164\001\uff7f\000" +
    "\004\124\u01ec\001\002\000\010\023\u01e3\124\u01e2\175\164" +
    "\001\002\000\014\131\073\165\142\166\156\167\056\175" +
    "\100\001\002\000\014\131\073\165\142\166\156\167\056" +
    "\175\100\001\002\000\006\124\u01e5\175\164\001\002\000" +
    "\014\131\073\165\142\166\156\167\056\175\100\001\002" +
    "\000\006\123\u01e7\175\164\001\002\000\112\006\126\011" +
    "\170\024\051\027\112\030\103\036\070\043\121\057\077" +
    "\060\041\101\040\114\167\115\030\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\125\142\120" +
    "\146\036\161\045\162\052\163\137\164\076\165\142\166" +
    "\156\167\056\170\055\172\016\173\046\174\025\175\100" +
    "\177\037\200\031\001\002\000\002\001\uffc6\000\006\123" +
    "\u01ea\175\164\001\uffca\000\112\006\126\011\170\024\051" +
    "\027\112\030\103\036\070\043\121\057\077\060\041\101" +
    "\040\114\167\115\030\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\125\142\120\146\036\161" +
    "\045\162\052\163\137\164\076\165\142\166\156\167\056" +
    "\170\055\172\016\173\046\174\025\175\100\177\037\200" +
    "\031\001\002\000\002\001\uffc8\000\014\131\073\165\142" +
    "\166\156\167\056\175\100\001\002\000\006\123\u01ee\175" +
    "\164\001\uffc9\000\112\006\126\011\170\024\051\027\112" +
    "\030\103\036\070\043\121\057\077\060\041\101\040\114" +
    "\167\115\030\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\125\142\120\146\036\161\045\162" +
    "\052\163\137\164\076\165\142\166\156\167\056\170\055" +
    "\172\016\173\046\174\025\175\100\177\037\200\031\001" +
    "\002\000\002\001\uffc7\000\002\001\ufff8\000\002\001\uff44" +
    "\000\026\005\201\006\174\007\206\010\175\016\214\025" +
    "\u01f3\031\203\033\177\045\212\047\207\001\uff49\000\050" +
    "\006\126\011\217\027\112\030\103\036\070\101\040\114" +
    "\216\131\073\146\036\161\045\162\052\163\137\165\142" +
    "\166\156\167\056\170\055\174\221\175\100\177\037\001" +
    "\002\000\002\001\uff4a\000\026\005\201\006\174\007\206" +
    "\010\175\016\214\017\u01f6\031\203\033\177\045\212\047" +
    "\207\001\002\000\050\006\126\011\217\027\112\030\103" +
    "\036\070\101\040\114\216\131\073\146\036\161\045\162" +
    "\052\163\137\165\142\166\156\167\056\170\055\174\221" +
    "\175\100\177\037\001\002\000\024\005\201\006\174\007" +
    "\206\010\175\016\214\031\203\033\177\045\212\047\207" +
    "\001\uff46\000\004\025\u01f9\001\002\000\050\006\126\011" +
    "\217\027\112\030\103\036\070\101\040\114\216\131\073" +
    "\146\036\161\045\162\052\163\137\165\142\166\156\167" +
    "\056\170\055\174\221\175\100\177\037\001\002\000\002" +
    "\001\uff45\000\002\001\ufff6\000\002\001\uff26\000\012\135" +
    "\u0196\152\u0195\153\u0194\175\164\001\uff65\000\006\124\u01ff" +
    "\175\164\001\002\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\006\123\u0201\175\164\001\002" +
    "\000\112\006\126\011\170\024\051\027\112\030\103\036" +
    "\070\043\121\057\077\060\041\101\040\114\167\115\030" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\125\142\120\146\036\161\045\162\052\163\137" +
    "\164\076\165\142\166\156\167\056\170\055\172\016\173" +
    "\046\174\025\175\100\177\037\200\031\001\002\000\004" +
    "\156\u0203\001\002\000\004\154\u0204\001\002\000\002\001" +
    "\uffb8\000\010\122\153\123\u0206\175\164\001\uff98\000\112" +
    "\006\126\011\170\024\051\027\112\030\103\036\070\043" +
    "\121\057\077\060\041\101\040\114\167\115\030\116\151" +
    "\117\020\121\066\122\153\127\035\130\106\131\073\134" +
    "\125\142\120\146\036\161\045\162\052\163\137\164\076" +
    "\165\142\166\156\167\056\170\055\172\016\173\046\174" +
    "\025\175\100\177\037\200\031\001\002\000\002\001\uff96" +
    "\000\002\001\uff97\000\014\131\073\165\142\166\156\167" +
    "\056\175\100\001\002\000\006\100\u020b\175\164\001\002" +
    "\000\022\050\u011e\131\073\164\u0122\165\u0121\166\u011c\167" +
    "\u0120\174\u011f\175\100\001\002\000\004\025\u012e\001\uffc0" +
    "\000\062\011\351\026\017\053\155\054\102\056\044\062" +
    "\124\063\015\065\063\066\134\067\050\071\157\075\143" +
    "\076\135\102\144\103\140\105\065\106\145\107\111\114" +
    "\350\140\131\141\115\150\160\155\022\171\130\001\ufffe" +
    "\000\002\001\ufffd\000\062\011\351\026\017\053\155\054" +
    "\102\056\044\062\124\063\015\065\063\066\134\067\050" +
    "\071\157\075\143\076\135\102\144\103\140\105\065\106" +
    "\145\107\111\114\350\140\131\141\115\150\160\155\022" +
    "\171\130\001\ufffc\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u020e\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\044\004\u020e\005\025\010\131\011\041\012\070" +
    "\013\103\014\042\015\107\016\032\030\113\031\056\033" +
    "\100\034\122\035\112\037\104\040\126\043\060\001\001" +
    "\000\124\004\053\005\025\006\u020d\007\031\010\131\011" +
    "\041\012\070\013\103\014\042\015\107\016\032\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\030\113\031\056\032\116\033\100\034\122\035\112" +
    "\036\066\037\104\040\126\041\057\042\135\043\060\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\020\061\026\063\073\001\001\000\004\053\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\u020c" +
    "\005\025\010\131\011\041\012\070\013\103\014\042\015" +
    "\107\016\032\030\113\031\056\033\100\034\122\035\112" +
    "\037\104\040\126\043\060\001\001\000\124\004\053\005" +
    "\025\006\052\007\031\010\131\011\041\012\070\013\103" +
    "\014\042\015\107\016\032\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\030\113\031\056" +
    "\032\116\033\100\034\122\035\112\036\066\037\104\040" +
    "\126\041\057\042\135\043\060\044\074\045\023\050\115" +
    "\051\033\054\140\055\071\057\147\060\020\061\026\063" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u0204\001\001\000" +
    "\002\001\001\000\004\055\u01fd\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\u01fc\057\147\060\u01fb\061\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\044\074\045\023\054" +
    "\140\055\217\057\147\061\u01f4\001\001\000\020\044\074" +
    "\045\023\052\u01f0\054\140\055\217\057\147\061\u01f1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\u01e0\001\001\000\004\055\u01de\001\001\000" +
    "\002\001\001\000\004\055\u01d9\001\001\000\054\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\066\041\057\042\135\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\u01d8\061" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\017\132\020\153\021" +
    "\146\022\106\023\061\025\121\026\022\027\151\032\116" +
    "\036\066\041\057\042\135\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\u01d6\061\026\001\001" +
    "\000\114\005\u010e\010\131\011\041\012\070\013\103\014" +
    "\042\015\107\016\032\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\030\113\031\056\032" +
    "\116\033\100\034\122\035\112\036\066\037\104\040\126" +
    "\041\057\042\135\043\060\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\171\061\172\001\001" +
    "\000\002\001\001\000\054\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\u01cf\061\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\120\005\u01cb\007\u01cc\010" +
    "\131\011\041\012\070\013\103\014\042\015\107\016\032" +
    "\017\132\020\153\021\146\022\106\023\061\025\121\026" +
    "\022\027\151\030\113\031\056\032\116\033\100\034\122" +
    "\035\112\036\066\037\104\040\126\041\057\042\135\043" +
    "\060\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\026\063\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u01b4\001\001\000\004\022\u01b2" +
    "\001\001\000\002\001\001\000\016\044\074\045\023\054" +
    "\140\055\217\057\147\061\u019a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u018e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\066\041\057\042\135\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\u018d\061" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u018a\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\017\132\020\153\021\146\022\106\023\061\025" +
    "\121\026\022\027\151\032\116\036\066\041\057\042\135" +
    "\044\074\045\023\050\115\051\033\054\140\055\071\057" +
    "\147\060\020\061\026\063\u0189\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0181\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\017\132\020\153\021\146\022\106" +
    "\023\061\024\u0152\025\121\026\022\027\151\032\116\036" +
    "\066\041\057\042\135\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\u0154\063\u0153\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u0151\001\001\000\002\001\001\000\012\046\u0150\047" +
    "\u0123\055\u011c\056\u0122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\017" +
    "\132\020\153\021\146\022\106\023\061\025\121\026\022" +
    "\027\151\032\116\036\066\041\057\042\135\044\074\045" +
    "\023\050\115\051\033\054\140\055\071\057\147\060\020" +
    "\061\026\063\u0143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u0114\001\001\000" +
    "\002\001\001\000\004\055\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\341\001\001\000\002\001" +
    "\001\000\004\055\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\161\001\001\000\004\055\320\001\001\000\002\001\001" +
    "\000\004\055\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\066\041\057\042" +
    "\135\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\026\063\170\001\001\000\004\055" +
    "\225\001\001\000\054\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\066\041" +
    "\057\042\135\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\171\061\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\266\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\265" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\264\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\256\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\255" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\254\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\252\001\001\000\002\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\251" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\250\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\233\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\214\001\001" +
    "\000\002\001\001\000\004\055\225\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\224\001\001" +
    "\000\002\001\001\000\004\055\221\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\226\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\234\001\001\000\002\001\001\000\020\044\074\045" +
    "\023\054\140\055\217\057\147\061\236\062\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\044\074\045" +
    "\023\054\140\055\217\057\147\061\236\062\244\001\001" +
    "\000\020\044\074\045\023\054\140\055\217\057\147\061" +
    "\236\062\242\001\001\000\002\001\001\000\020\044\074" +
    "\045\023\054\140\055\217\057\147\061\236\062\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\307\001\001\000\002\001\001\000\054\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\066\041\057\042\135\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\306\061\026" +
    "\001\001\000\054\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\305\061\026\001\001\000\004\055\276" +
    "\001\001\000\054\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\275\061\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\302\001\001\000\054\017" +
    "\132\020\153\021\146\022\106\023\061\025\121\026\022" +
    "\027\151\032\116\036\066\041\057\042\135\044\074\045" +
    "\023\050\115\051\033\054\140\055\071\057\147\060\301" +
    "\061\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\017\132\020\153\021\146\022\106\023\061\025\121" +
    "\026\022\027\151\032\116\036\066\041\057\042\135\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\304\061\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\313" +
    "\001\001\000\054\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\312\061\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\315\061\026\001\001\000\002" +
    "\001\001\000\054\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\317\061\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\322\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\066\041\057\042" +
    "\135\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\026\063\324\001\001\000\002\001" +
    "\001\000\004\055\332\001\001\000\004\055\327\001\001" +
    "\000\002\001\001\000\004\055\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\334\001\001\000\002" +
    "\001\001\000\004\022\337\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\066\041\057\042\135\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\026" +
    "\063\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\017\132\020\153" +
    "\021\146\022\106\023\061\025\121\026\022\027\151\032" +
    "\116\036\066\041\057\042\135\044\074\045\023\050\115" +
    "\051\033\054\140\055\071\057\147\060\020\061\026\063" +
    "\344\001\001\000\002\001\001\000\006\064\346\065\226" +
    "\001\001\000\042\005\351\010\131\011\041\012\070\013" +
    "\103\014\042\015\107\016\032\030\113\031\056\033\100" +
    "\034\122\035\112\037\104\040\126\043\060\001\001\000" +
    "\004\055\u0110\001\001\000\042\005\u010e\010\131\011\041" +
    "\012\070\013\103\014\042\015\107\016\032\030\113\031" +
    "\056\033\100\034\122\035\112\037\104\040\126\043\060" +
    "\001\001\000\002\001\001\000\004\055\u010b\001\001\000" +
    "\004\055\372\001\001\000\004\055\355\001\001\000\002" +
    "\001\001\000\004\055\367\001\001\000\004\055\360\001" +
    "\001\000\002\001\001\000\004\055\362\001\001\000\002" +
    "\001\001\000\056\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\020\061\026\063\366\001\001\000\004" +
    "\055\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\066\041" +
    "\057\042\135\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\020\061\026\063\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0108\001\001" +
    "\000\004\055\u0101\001\001\000\056\017\132\020\153\021" +
    "\146\022\106\023\061\025\121\026\022\027\151\032\116" +
    "\036\066\041\057\042\135\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\020\061\026\063\u0100" +
    "\001\001\000\004\055\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0103\001\001" +
    "\000\002\001\001\000\056\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\020\061\026\063\u0107\001\001" +
    "\000\004\055\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\017\132\020\153\021\146" +
    "\022\106\023\061\025\121\026\022\027\151\032\116\036" +
    "\066\041\057\042\135\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\026\063\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\066\041\057\042\135\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\020\061" +
    "\026\063\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\346\001\001\000\002\001" +
    "\001\000\042\005\u0113\010\131\011\041\012\070\013\103" +
    "\014\042\015\107\016\032\030\113\031\056\033\100\034" +
    "\122\035\112\037\104\040\126\043\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u0116\001\001\000" +
    "\002\001\001\000\004\055\u0118\001\001\000\002\001\001" +
    "\000\012\046\u011a\047\u0123\055\u011c\056\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\u012c\047\u0123\055\u011c\056\u0122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\066\041\057\042\135\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\u0128" +
    "\063\u0127\001\001\000\002\001\001\000\004\055\u0129\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\017\132\020\153\021\146\022\106\023\061\025" +
    "\121\026\022\027\151\032\116\036\066\041\057\042\135" +
    "\044\074\045\023\050\115\051\033\054\140\055\071\057" +
    "\147\060\020\061\026\063\u012b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\u012f\047" +
    "\u0123\055\u011c\056\u0122\001\001\000\002\001\001\000\004" +
    "\055\u0131\001\001\000\012\046\u0132\047\u0123\055\u011c\056" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u0135\001\001\000\002\001\001\000\010\047\u0139\055" +
    "\u0137\056\u0138\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\020\061\u0128\063\u0127\001\001" +
    "\000\006\047\u013d\056\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\u0142\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\u0145\010\131\011\041\012\070" +
    "\013\103\014\042\015\107\016\032\030\113\031\056\033" +
    "\100\034\122\035\112\037\104\040\126\043\060\001\001" +
    "\000\002\001\001\000\004\055\u014b\001\001\000\056\017" +
    "\132\020\153\021\146\022\106\023\061\025\121\026\022" +
    "\027\151\032\116\036\066\041\057\042\135\044\074\045" +
    "\023\050\115\051\033\054\140\055\071\057\147\060\020" +
    "\061\026\063\u0148\001\001\000\002\001\001\000\012\046" +
    "\u014a\047\u0123\055\u011c\056\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\020\061\026\063\u014d\001\001" +
    "\000\002\001\001\000\012\046\u014f\047\u0123\055\u011c\056" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u0156\001\001\000\002\001\001\000\004" +
    "\055\u0158\001\001\000\002\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\066\041\057\042\135\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\026" +
    "\063\u015a\001\001\000\002\001\001\000\016\044\074\045" +
    "\023\054\140\055\217\057\147\061\u0160\001\001\000\016" +
    "\044\074\045\023\054\140\055\217\057\147\061\u015f\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u015e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\074\045\023\054\140\055\217" +
    "\057\147\061\u0162\001\001\000\002\001\001\000\056\017" +
    "\132\020\153\021\146\022\106\023\061\025\121\026\022" +
    "\027\151\032\116\036\066\041\057\042\135\044\074\045" +
    "\023\050\115\051\033\054\140\055\071\057\147\060\020" +
    "\061\026\063\u0164\001\001\000\002\001\001\000\012\046" +
    "\u0166\047\u0123\055\u011c\056\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u016a\001" +
    "\001\000\002\001\001\000\056\017\132\020\153\021\146" +
    "\022\106\023\061\025\121\026\022\027\151\032\116\036" +
    "\066\041\057\042\135\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\026\063\u016c\001" +
    "\001\000\002\001\001\000\004\055\u0172\001\001\000\004" +
    "\055\u016f\001\001\000\002\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\066\041\057\042\135\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\026" +
    "\063\u0171\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\017\132\020\153\021\146\022\106\023\061\025\121" +
    "\026\022\027\151\032\116\036\066\041\057\042\135\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\020\061\026\063\u0174\001\001\000\002\001\001\000" +
    "\004\055\u0176\001\001\000\002\001\001\000\004\055\u0178" +
    "\001\001\000\002\001\001\000\056\017\132\020\153\021" +
    "\146\022\106\023\061\025\121\026\022\027\151\032\116" +
    "\036\066\041\057\042\135\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\020\061\026\063\u017a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\u017f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\074\045\023\054\140\055" +
    "\217\057\147\061\u018c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u0190\001\001\000" +
    "\002\001\001\000\056\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\066\041" +
    "\057\042\135\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\020\061\026\063\u0192\001\001\000" +
    "\002\001\001\000\004\055\u0199\001\001\000\004\055\u0198" +
    "\001\001\000\054\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\u0196\061\u0197\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\074\045\023\054\140\055\217" +
    "\057\147\061\u019c\001\001\000\002\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\u019e\001\001" +
    "\000\002\001\001\000\016\044\074\045\023\054\140\055" +
    "\217\057\147\061\u01a0\001\001\000\002\001\001\000\016" +
    "\044\074\045\023\054\140\055\217\057\147\061\u01a2\001" +
    "\001\000\002\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\u01a4\001\001\000\002\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\u01aa" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u01a7\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\u01a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\074\045\023" +
    "\054\140\055\217\057\147\061\u01ac\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u01ae\001\001\000\002\001\001\000\016\044\074\045" +
    "\023\054\140\055\217\057\147\061\u01b0\001\001\000\002" +
    "\001\001\000\056\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\066\041\057" +
    "\042\135\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\020\061\026\063\u01b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\u01b6\010\131\011\041\012\070\013\103\014\042\015\107" +
    "\016\032\030\113\031\056\033\100\034\122\035\112\037" +
    "\104\040\126\043\060\001\001\000\002\001\001\000\056" +
    "\017\132\020\153\021\146\022\106\023\061\025\121\026" +
    "\022\027\151\032\116\036\066\041\057\042\135\044\074" +
    "\045\023\050\115\051\033\054\140\055\071\057\147\060" +
    "\020\061\026\063\u01b8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u01bc\001\001\000" +
    "\002\001\001\000\012\046\u01be\047\u0123\055\u011c\056\u0122" +
    "\001\001\000\002\001\001\000\004\055\u01c0\001\001\000" +
    "\002\001\001\000\012\046\u01c2\047\u0123\055\u011c\056\u0122" +
    "\001\001\000\002\001\001\000\004\055\u01c8\001\001\000" +
    "\004\055\u01c5\001\001\000\002\001\001\000\004\055\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\u01ca\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u01d1\001\001\000\002\001\001\000\056" +
    "\017\132\020\153\021\146\022\106\023\061\025\121\026" +
    "\022\027\151\032\116\036\066\041\057\042\135\044\074" +
    "\045\023\050\115\051\033\054\140\055\071\057\147\060" +
    "\020\061\026\063\u01d3\001\001\000\002\001\001\000\012" +
    "\046\u01d5\047\u0123\055\u011c\056\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\074\045\023\054\140\055" +
    "\217\057\147\061\u01db\001\001\000\002\001\001\000\016" +
    "\044\074\045\023\054\140\055\217\057\147\061\u01dd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u01e8\001\001\000\004\055" +
    "\u01e3\001\001\000\002\001\001\000\004\055\u01e5\001\001" +
    "\000\002\001\001\000\056\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\066" +
    "\041\057\042\135\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\020\061\026\063\u01e7\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\066\041\057\042\135\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\026" +
    "\063\u01ea\001\001\000\002\001\001\000\004\055\u01ec\001" +
    "\001\000\002\001\001\000\056\017\132\020\153\021\146" +
    "\022\106\023\061\025\121\026\022\027\151\032\116\036" +
    "\066\041\057\042\135\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\026\063\u01ee\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\044\074\045\023\052\u01f3\054" +
    "\140\055\217\057\147\061\u01f1\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\074\045\023\054\140\055" +
    "\217\057\147\061\u01f6\001\001\000\004\067\u01f7\001\001" +
    "\000\002\001\001\000\020\044\074\045\023\054\140\055" +
    "\217\057\147\061\236\062\u01f9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u01ff\001\001\000\002\001\001" +
    "\000\056\017\132\020\153\021\146\022\106\023\061\025" +
    "\121\026\022\027\151\032\116\036\066\041\057\042\135" +
    "\044\074\045\023\050\115\051\033\054\140\055\071\057" +
    "\147\060\020\061\026\063\u0201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0206\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\066\041\057\042" +
    "\135\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\026\063\u0207\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u0209\001\001\000\002" +
    "\001\001\000\012\046\u020b\047\u0123\055\u011c\056\u0122\001" +
    "\001\000\002\001\001\000\042\005\u01cb\010\131\011\041" +
    "\012\070\013\103\014\042\015\107\016\032\030\113\031" +
    "\056\033\100\034\122\035\112\037\104\040\126\043\060" +
    "\001\001\000\002\001\001\000\042\005\u01cb\010\131\011" +
    "\041\012\070\013\103\014\042\015\107\016\032\030\113" +
    "\031\056\033\100\034\122\035\112\037\104\040\126\043" +
    "\060\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DTRulesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DTRulesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DTRulesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
        
            
    public void report_error(String message, Object info) 
    			throws Error
    {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {      
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)   
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m);
	    // this.done_parsing();
	    // throw new Error(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) 
    		throws Error
    {
        report_error(message, info);    
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DTRulesParser$actions {



    private String firstexp;		
    
    public String checkRList(String rList){
       return rList;       
    }
    
    public String checkEntity(String entity)
      throws Error
    {
       return entity;
    }
    
    public String checkReadOnly(String attribute)
      throws Error
    {
       return attribute;
    }    

  private final DTRulesParser parser;

  /** Constructor */
  CUP$DTRulesParser$actions(DTRulesParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DTRulesParser$do_action(
    int                        CUP$DTRulesParser$act_num,
    java_cup.runtime.lr_parser CUP$DTRulesParser$parser,
    java.util.Stack            CUP$DTRulesParser$stack,
    int                        CUP$DTRulesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DTRulesParser$result;

      /* select the action based on the action number */
      switch (CUP$DTRulesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // boolexpr ::= foranyallwhereStmnt 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // boolexpr ::= foranyalloftheStmnt 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // boolexpr ::= id ARROW boolexpr 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i +" entitypush "+e+" entitypop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // boolexpr ::= BOOL_ID 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // boolexpr ::= BOOL 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // boolexpr ::= POSSESSION boolexpr 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                    if(r.equalsIgnoreCase("sponsor")){
                       RESULT = "{ 'bogus' { pop dup } sponsor if } >> " + b + " entitypop entitypop";
                    }else{   
                       RESULT = r + " >> "+ b +" entitypop entitypop"; 
                    }
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // boolexpr ::= expr ABSOLUTETIME 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		                 
                   RESULT = b +" " + t ;
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // boolexpr ::= DATEMODIFIER boolexpr 
            {
              String RESULT =null;
		String m = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = m + " " + e +" setday "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // boolexpr ::= LPAREN boolexpr RPAREN 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // boolexpr ::= USING ENTITY boolexpr 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = id + " entitypush " + b + " entitypop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // boolexpr ::= isaStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // boolexpr ::= doesStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // boolexpr ::= thereisnoStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // boolexpr ::= isSubstring 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // boolexpr ::= isthereStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // boolexpr ::= edgindivStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // boolexpr ::= hasapersonStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // boolexpr ::= hasaStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // boolexpr ::= id INCLUDESMEMBER id 
            {
              String RESULT =null;
		String list1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = list1 + " " + list2 + " intersects"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // boolexpr ::= id ISAMEMBEROF id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rlist +" "+ i + " memberof"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // boolexpr ::= isforeverytest 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // boolexpr ::= whohasaTest 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // boolexpr ::= NOT boolexpr 
            {
              String RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b + " ! "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // boolexpr ::= boolexpr OR boolexpr 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b1 + " " + b2 + " || "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // boolexpr ::= boolexpr AND boolexpr 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b1 + " " + b2 + " && "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // boolexpr ::= boolexpr EQUALS boolexpr 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b1 + " " + b2 + " p== "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // boolexpr ::= expr LESSTHANEQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " p<= "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // boolexpr ::= expr GREATERTHANEQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " p>= "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // boolexpr ::= expr NOTEQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " p!= "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // boolexpr ::= expr EQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " p== "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // boolexpr ::= commaPhrase 
            {
              String RESULT =null;
		String cp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = cp;  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // boolexpr ::= expr GREATERTHAN expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " p>"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // boolexpr ::= expr LESSTHAN expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " p<"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // boolexpr ::= FALSEIF boolexpr 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b + " ! "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // boolexpr ::= TRUEIF boolexpr 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // commaPhrase ::= COMMALIST commaListExpr 
            {
              String RESULT =null;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaPhrase",39, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // commaPhrase ::= LISTEQUALS expr EQUALS expr NT$3 COMMA commaexpr 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT += ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaPhrase",39, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$3 ::= 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
  
                    firstexp = e1;
                    RESULT = e1 +" "+ e2 +" p== "; 
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$3",53, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // commaPhrase ::= expr EQUALS expr NT$2 COMMA commaexpr 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT += ceq;
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaPhrase",39, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$2 ::= 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
  
                    firstexp = e1;
                    RESULT = e1 +" "+ e2 +" p== "; 
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$2",52, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // commaListExpr ::= expr 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   RESULT = id ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaListExpr",40, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // commaListExpr ::= expr COMMA commaListExpr 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		     
                    RESULT  = id + " \",\"" + " s+ " + ceq + " s+ ";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaListExpr",40, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // commaexpr ::= expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 	RESULT = firstexp + " "+e1+" == || "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // commaexpr ::= expr OR commaexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = firstexp +" "+e1+" == || "+ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // commaexpr ::= expr COMMA OR commaexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   RESULT = firstexp +" "+e1+" == || "+ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // commaexpr ::= expr COMMA commaexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   RESULT = firstexp +" "+e1+" == || "+ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // number ::= BIGDECIMAL 
            {
              String RESULT =null;
		String bg = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = bg; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // number ::= INTEGER TIMEPERIOD 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i + " " + t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // number ::= FLOAT 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = r; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // number ::= INTEGER 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // mid ::= mid TIMEPERIOD 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i + " " + t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // mid ::= RLIST 
            {
              String RESULT =null;
		String rl = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rl; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // mid ::= ENTITY 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // mid ::= BOOL_ID 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // mid ::= ID 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = checkReadOnly(i); 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // id ::= SUMOFEACH id FORALL id 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                   RESULT = "0 { "+i1+" p+ } "+i2+" for";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // id ::= SUMOFEACH id FORALL id WHERE bexpression 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                   RESULT = "0 { { "+i1+" p+ } "+test+" if } "+i2+" for";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // id ::= id TIMEPERIOD 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i + " " + t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // id ::= TIMEPERIOD OF id 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 if(t.equals("years"))  t = "year";
                   if(t.equals("months")) t = "month";
                   if(t.equals("day"))    t = "day";
                   RESULT = i + " " + t + "of";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // id ::= RLIST 
            {
              String RESULT =null;
		String rl = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rl; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // id ::= ENTITY 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // id ::= ID 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // term ::= number 
            {
              String RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = n; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("term",42, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // term ::= STR 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("term",42, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // term ::= id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("term",42, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr ::= deepcopyLists 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = id ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr ::= SIZEOF id 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = checkRList(list) + " length " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr ::= id ARROW expr 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i +" entitypush "+e+" entitypop "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr ::= POSSESSION id 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                    if(r.equalsIgnoreCase("sponsor")){
                       RESULT = "{ 'bogus' { pop dup } sponsor if } >> " + i + " entitypop entitypop ";
                    }else{   
                       RESULT = r + " >> "+ i +" entitypop entitypop "; 
                    }
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr ::= expr START OF TIMEPERIOD 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 
                if(!t.equals("months")) throw new Error("invalid syntax: "+t);
                RESULT = e1+" firstofmonth "; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr ::= expr END OF TIMEPERIOD 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 
                if(!t.equals("months")) throw new Error("invalid syntax: "+t);
                RESULT = e1+" endofmonth "; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr ::= lookupExpression 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr ::= NUMBEROFTIMEPERIOD BETWEEN expr AND expr 
            {
              String RESULT =null;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + p +" "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr ::= USING id NT$1 expr 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT +=  e + " entitypop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$1 ::= 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
 RESULT = i + " entitypush "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$1",51, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr ::= MINUS expr 
            {
              String RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " 0 "+e1+" p- "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" p- "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= expr PLUSSTR expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" s+ "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" p+ "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" p/ "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" p* "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= expr SCALED INTEGER DECPLACES ROUNDED expr ORMORE 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 
                String zeros = "0000000000000000000000000000000000000000";
                String sConst = "1"+zeros.substring(0,Integer.parseInt(n));
                RESULT = e1 + " " + sConst + " * "+e2+" round " + sConst +" div"; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= expr SCALED INTEGER DECPLACES 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 
                String zeros  = "0000000000000000000000000000000000000000";
                String sConst = "1" + zeros.substring(0,Integer.parseInt(n));
                RESULT = e1 + " " + sConst + " * 1 round " + sConst +" div"; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= expr ROUNDED expr ORMORE 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = e1 +" "+e2+" pround"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= GREATEROF expr OR expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  e1 + " " + e2 + " pmax"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= LESSEROF expr OR expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  e1 + " " + e2 + " pmin"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= term 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = t; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // bexpression ::= boolexpr 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("bexpression",49, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lookupExpression ::= LOOKUP expr USINGCOLUMN expr AND expr FROMTABLE expr FORDATE expr RETURNING expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-10)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+i1+" "+i2+" "+e3+" "+e4+" " +e5+" lookupMultipleParmTable"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lookupExpression ::= LOOKUP CODE expr USINGCOLUMN expr FROMTABLE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" tablelookupforcode"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lookupExpression ::= LOOKUP CODE expr USINGCOLUMN expr FROMTABLE expr FORDATE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" "+e4+" tabledatelookupforcode"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lookupExpression ::= LOOKUP expr USINGCOLUMN expr FROMTABLE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" tablelookup"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lookupExpression ::= LOOKUP expr USINGCOLUMN expr FROMTABLE expr FORDATE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" "+e4+" tabledatelookup"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // deepcopyLists ::= ACOPYOFALLMEMBERSIN id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = i +" deepcopy"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("deepcopyLists",35, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // throwRulesException ::= THROWRULESEXCEPTION ID 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = id + " throwexception" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("throwRulesException",33, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // throwRulesException ::= THROWRULESEXCEPTION STR 
            {
              String RESULT =null;
		String str = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = str + " throwexception" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("throwRulesException",33, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // foranyallwhereStmnt ::= boolexpr FORALLOFTHE id IN id WHERE boolexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true  { { "+e1+" && } "+test+" if "+" } "+group+"."+rlist+" for "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyallwhereStmnt",32, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // foranyallwhereStmnt ::= boolexpr FORANYOFTHE id IN id WHERE boolexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { { "+e1+" || } "+test+" if "+" } "+group+"."+rlist+" for "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyallwhereStmnt",32, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // foranyallwhereStmnt ::= boolexpr FORALLOFTHE id WHERE boolexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true  { { " + e1 + " && } " + test + " if " + " } " + rlist + " for " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyallwhereStmnt",32, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // foranyallwhereStmnt ::= boolexpr FORANYOFTHE id WHERE boolexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { { " + e1 + " || } " + test + " if " + " } " + rlist + " for " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyallwhereStmnt",32, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // foranyalloftheStmnt ::= foranyalloftheStmnt FORALLOFTHE id IN id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { " + e1 + " && } " + group + "." + rlist + "  for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // foranyalloftheStmnt ::= foranyalloftheStmnt FORANYOFTHE id IN id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { " + e1 + " || } " + group + "." + rlist + "  for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // foranyalloftheStmnt ::= foranyalloftheStmnt FORALLOFTHE id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true  { " + e1 + " && } " + rlist + "  for";  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foranyalloftheStmnt ::= foranyalloftheStmnt FORANYOFTHE id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { " + e1 + " || } " + rlist + "  for";  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foranyalloftheStmnt ::= boolexpr FORALLOFTHE id IN id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " true  { " + e1 + " && } " +  group + "." + rlist + " for " ;  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // foranyalloftheStmnt ::= boolexpr FORANYOFTHE id IN id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " false { " + e1 + " || } " +  group + "." + rlist + " for " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // foranyalloftheStmnt ::= boolexpr FORALLOFTHE id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " true  { " + e1 + " && } " +  rlist + " for " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // foranyalloftheStmnt ::= boolexpr FORANYOFTHE id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " false { " + e1 + " || } " +  rlist + " for " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // isforeverytest ::= IS bexpression FOREVERY id IN id WHERE bexpression 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = " true { { "+b1+" && } "+ b2 +" if } "+ i2 +" for";  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isforeverytest",28, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // doesStatement ::= DOES EVERY id OFINDIVIDUALHAVE id WHERE bexpression 
            {
              String RESULT =null;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " true { individual entitypush inverserelationship entitypush "+
                                              "{ false "+
                                                 "{ individual entitypush inverserelationship entitypush "+
                                                   "{ eligiblestudent true == || } relationshipcd "+r2+" == if "+
                                                   "entitypop entitypop "+
                                                 "} relationships for && "+
                                              "} relationshipcd "+r1+" == if "+
                                           "entitypop entitypop } relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("doesStatement",24, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // whohasaStatement ::= WHOHASA id whohasaStatement 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual entitypush inverserelationship entitypush " +
                                                "{ "+test+" } relationshipcd " + relationship +" == if "+
                                                "entitypop entitypop " +
                                           "} individual.relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaStatement",16, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // whohasaStatement ::= WHOHASA id WHERE bexpression 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual entitypush inverserelationship entitypush " +
                                                "{ "+test+" || } relationshipcd " + relationship +" == if "+
                                                "entitypop entitypop " +
                                           "} individual.relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaStatement",16, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // whohasaStatement ::= WHOHASA id 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual entitypush inverserelationship entitypush " +
                                                "relationshipcd " + relationship +" == || "+
                                                "entitypop entitypop "+
                                           "} individual.relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaStatement",16, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // whohasaTest ::= whohasaStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " false " + stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaTest",38, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // hasapersonStatement ::= HASAPERSON whohasaStatement 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+
                                              "individual entitypush inverserelationship entitypush "+
                                              test + " entitypop entitypop "+
                                           "} individual.relationships for";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasapersonStatement",15, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // hasapersonStatement ::= HASAPERSON WHERE bexpression 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+
                                              "individual entitypush inverserelationship entitypush "+
                                              test + " ||  entitypop entitypop "+
                                           "} individual.relationships for";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasapersonStatement",15, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // hasaStatement ::= HASA id whohasaStatement 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { individual entitypush inverserelationship entitypush "+
                                           "{ "+test+" } relationshipcd " + relationship +" == if entitypop entitypop "+
                                           "} individual.relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasaStatement",14, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // hasaStatement ::= HASA id WHERE bexpression 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { individual entitypush inverserelationship entitypush "+
                                           "{ "+test+" || } relationshipcd " + relationship +" == if entitypop entitypop "+
                                           "} individual.relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasaStatement",14, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // hasaStatement ::= HASA id 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { individual entitypush inverserelationship entitypush "+
                                           "relationshipcd "+relationship+" == || entitypop entitypop " +
                                           "} individual.relationships for";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasaStatement",14, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // isaStatement ::= ISA id TOAPERSON WHERE bexpression 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+
                                             "individual entitypush "+
                                             "{ "+test+" || } relationshipcd " + relationship + " == if "+
                                             "entitypop "+
                                           "} relationships for";
							   
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isaStatement",13, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // isaStatement ::= ISA id 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { relationshipcd "+relationship+" == || "+
                                           "} individual.relationships for ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isaStatement",13, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // forallStatement ::= actionStatement FOREACH id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+id+"s for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // forallStatement ::= actionStatement FOREACH id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+ checkRList(id2+"."+id1+"s") + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // forallStatement ::= actionStatement FOREACH id AND id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" entitypush "+stmt+" entitypop } "+ checkRList(group+"."+id1+"s") + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // forallStatement ::= actionStatement FOREACH id AND id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" entitypush { "+stmt+" } "+test+" if entitypop } "+ checkRList(group+"."+id1+"s") + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // forallStatement ::= actionStatement FOREACH id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { "+stmt+" } "+test+" if  } "+ checkRList(group+"."+id+"s")+ " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // forallStatement ::= actionStatement FOREACH id AND id IN id ANDTHEIR id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" entitypush { " + stmt + " } "+ group2+" for entitypop } "+ checkRList(group1 + "." + id + "s") + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // forallStatement ::= actionStatement FORALL id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { "+stmt+" } "+test+" if  } "+ checkRList(list) +" for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // forallStatement ::= actionStatement FORALL id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+id+" for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // forallStatement ::= actionStatement FORALL id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+ checkRList(id2+"."+id1) +" for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // forallStatement ::= actionStatement FORALL id AND id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" entitypush "+stmt+" entitypop } "+ checkRList(group+"."+id1) +" for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // forallStatement ::= actionStatement FORALL id AND id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" entitypush { "+stmt+" } "+test+" if entitypop } "+ checkRList(group+"."+id1) +" for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // forallStatement ::= actionStatement FORALL id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { "+stmt+" } "+test+" if  } "+ checkRList(group+"."+id) +" for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // forallStatement ::= actionStatement FORALL id AND id IN id ANDTHEIR id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" entitypush { " + stmt + " } "+ group2+" for entitypop } "+ checkRList(group1 + "." + id) + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // forallStatement ::= actionStatement FORALL id ANDTHEIR id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { " + stmt + " } "+ checkRList(group2) + " for } "+ checkRList(id) + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // forAllEdgIndv ::= ADDALL_EDG_INDV ENTITY ANDFOREACH actionStatement 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String as = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ " + id + " entitypush edg_individuals edg_individual clone addto entitypop " +
                                            "} edg_individuals for " +
                                            id + " entitypush { " + as + " } edg_individuals for entitypop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forAllEdgIndv",27, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // forAllEdgIndv ::= ADDALL_EDG_INDV ENTITY 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ " + id + " entitypush edg_individuals edg_individual clone addto entitypop " +
                                            "} edg_individuals for";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forAllEdgIndv",27, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // removefromlist ::= REMOVE id FROM id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = list + " " + i + " remove ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // removefromlist ::= REMOVE id FROM id WHERE bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = "{ " + list + " " + i + " remove } " + test + " if ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // removefromlist ::= REMOVE EACH id FROM id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = "list clear " ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // removefromlist ::= REMOVE EACH id FROM id WHERE bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = "{ { " + list + " " + i + " remove } " 
                                            + test + " if} " + list + " forr" ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // formGroupStatement ::= ADDALL id ANDFOREACH actionStatement 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String toGroup = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = toGroup +" entitypush { "+
                               "'edg_individual' createentity entitypush "+
                               "/individual individual.individual def "+
                               "edg_individuals edg_individual addto entitypop } "+
                               "individuals for "+
                               "{ individual entitypush "+stmt+" entitypop } edg_individuals for "+
                               "entitypop edg_groups "+toGroup +" addto";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // formGroupStatement ::= ADDALL id 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String toGroup = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = toGroup +" entitypush { 'edg_individual' createentity entitypush "+
                                  "/individual individual.individual def "+
                                  "edg_individuals edg_individual addto entitypop "+
                                  "} individuals for entitypop "+ 
                                  " edg_groups "+toGroup +" addto";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formGroupStatement ::= ADD ID TO RLIST 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  i1+ " " + i + " addto" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formGroupStatement ::= ADD ENTITY TO RLIST 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  i1+ " " + i + " addto" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // formGroupStatement ::= ADD ENTITY TO ENTITY 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  checkRList(i1 + "s")+ " " + i + " addto" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formGroupStatement ::= FORMAGROUP id CALLED id 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String variable = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "/"+variable+" '"+id+"' createentity def"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // edgindivStatement ::= EDGINDIVHAS bexpression 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false individual.individual { "+
                                               "{ swap "+test+" || swap } over individual == if "+
                                           "} edg_group.edg_individuals for pop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("edgindivStatement",21, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // copyStatement ::= COPY id TO id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "/"+ i2 + " " + i + " clone def"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("copyStatement",26, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // wherehasStatement ::= actionStatement WHERE id HAS bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { { {pop false "+stmt+"  } "+test+" if } over if } " + i + "s for pop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("wherehasStatement",10, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // addtocontextStatement ::= FINDTHEFIRST id IN id WHERE bexpression ANDADDIT TOTHECONTEXT 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		 RESULT = "true "+
                                              "{  { pop "+i+" false } over "+test+" and if " +
                                              "} "+list+" for " +
                                           "pop entitypush";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("addtocontextStatement",30, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // addtocontextStatement ::= ADD id TOTHECONTEXT 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = i + " entitypush"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("addtocontextStatement",30, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // findStatement ::= FINDALLEDGINDIVIDUAL WITHIN id ANDSET setPhrase 
            {
              String RESULT =null;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+ phrase + " } edg_group.edg_individuals for pop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // findStatement ::= FINDALLPERSONS WHERE bexpression ANDFINDREFERNCEDINDIVIDUAL IN id ANDSET setPhrase 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual entitypush inverserelationship entitypush "+
                                              "{ " +
                                                  group +" entitypush "+
                                                  "inverserelationship entitypush individual { "+
                                                     "{ "+phrase+" } over individual == if "+
                                                  "} edg_individuals for entitypop "+
                                                  "pop entitypop "+
                                              "} "+b+" if entitypop entitypop " +
                                           "} relationships for "; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // findStatement ::= FINDALLPERSONS WHERE bexpression ANDFINDINDIVIDUAL IN id ANDSET setPhrase 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual entitypush inverserelationship entitypush "+
                                              "{ " +
                                                  group +" entitypush "+
                                                  "individual { "+
                                                     "{ "+phrase+" } over individual == if "+
                                                  "} edg_individuals for "+
                                                  "pop entitypop "+
                                              "} "+b+" if entitypop entitypop " +
                                           "} relationships for "; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // findStatement ::= FINDAELEMENT IN id WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { "                  +
                                               "{ "                   +
                                                   "{ pop false "     +
                                                        phrase        +
                                                   " } " + b + " if " +
                                                " } over if "         +
                                           " } " + checkRList(list) + " for pop";                       
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // findStatement ::= FINDAENTITY IN id WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { "                  +
                                               "{ "                   +
                                                   "{ pop false "     +
                                                        phrase        +
                                                   " } " + b + " if " +
                                                " } over if "         +
                                           " } " + group + "." +entity+"s for pop";
                       
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // findStatement ::= FINDAENTITY WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { "                  +
                                               "{ "                   +
                                                   "{ pop false "     +
                                                        phrase        +
                                                   "} " + b + " if " +
                                                "} over if "         +
                                           "} "+entity+"s for pop";
                       
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // findStatement ::= FINDINDIVIDUAL IN id ANDSET setPhrase 
            {
              String RESULT =null;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "individual " + group + " entitypush { " +
                                             "individual over == "+
                                             "{ individual entitypush " +
                                                phrase +
                                                " entitypop "+
                                             "} swap if "+
                                           "} edg_individuals for " +
                                           "pop entitypop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // findStatement ::= FINDAPERSON WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " true { individual entitypush inverserelationship entitypush " +
                                             "{ { pop false "+ phrase + " } "+b+" if } over if "+
                                             "entitypop entitypop "+
                                           "} individual.relationships for pop" ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // thereisnoStatement ::= THEREISNO ELEMENT IN id 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { true || } "+ checkRList(list) + " for !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // thereisnoStatement ::= THEREISNO ELEMENT IN id WHERE bexpression 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(list) + " for !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // thereisnoStatement ::= THEREISNO id IN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(group+"."+entity+"s") + " for !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // thereisnoStatement ::= THEREISNO id WITHIN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(group+"."+entity+"s") + " for !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // isthereStatement ::= ISTHERE id AND id IN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String entity2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+entity2+" entitypush "+test+" || entitypop } "+
   						                checkRList(group+"."+entity+"s") + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // isthereStatement ::= ISTHERE ELEMENT IN id WHERE bexpression 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(list) + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // isthereStatement ::= ISTHERE id IN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(group +"."+entity+"s") + " for"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // isthereStatement ::= ISTHERE ELEMENT IN id 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = "false { true  || } " + checkRList(list) + " for"  ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // isthereStatement ::= ISTHERE id IN id 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = "false { true  || } " + group + "." +entity +"s"+ " for"  ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // isSubstring ::= IS orSubstring SUBSTRINGOF expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e2 + " false " + s + " swap pop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isSubstring",19, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // orSubstring ::= expr 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " over "+e+" indexof 0 >= ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // orSubstring ::= orSubstring COMMA OR expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s + " over "+e+" indexof 0 >= ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // orSubstring ::= orSubstring COMMA expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s + " over "+e+" indexof 0 >= ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // orSubstring ::= orSubstring OR expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s + " over "+e+" indexof 0 >= ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sortStatement ::= SORT DESCENDING id BY id 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rlist +" /"+attribute+" false sortentities "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("sortStatement",9, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sortStatement ::= SORT ASCENDING id BY id 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rlist +" /"+attribute+" true sortentities "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("sortStatement",9, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // performStatement ::= TABLENAME 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("performStatement",7, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifStatement ::= IF bexpression THEN actionStatement 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+test+" if"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("ifStatement",8, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // setPhrase2 ::= mid EQUALS bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		                                    
                                   RESULT = "/" + checkReadOnly(i) + " " + b ; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase2",37, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // setPhrase2 ::= mid EQUALS expr 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "/" + i + " " + e ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase2",37, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // setPhrase ::= mid EQUALS ACOPYOFALLMEMBERSIN id WHERE bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { " + i + " " + checkRList(list).substring(0,list.length()-1) 
                                 + " clone addto } " + test + " if } " + list + " for " ; 
                              
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // setPhrase ::= setPhrase COMMA SET setPhrase 
            {
              String RESULT =null;
		String setSt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = setSt + " " + p ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // setPhrase ::= ON POSSESSION id setPhrase 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		                                        // an array of those entities.
                                RESULT =  "{ "+                         // The old foreach is a for in DTRules
                                             " {" +
                                                 " " + p +  
                                             " } " + i1 + "." + i1 + " " + i1 + " == if" +
                                         " } "+ i2 +"s for ";
                              
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // setPhrase ::= POSSESSION setPhrase 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   
                                  if(r.equalsIgnoreCase("sponsor")){
                                    RESULT = "{ 'bogus' { pop dup } sponsor if } >> " + p + " entitypop entitypop";
                                  }else{   
                                    RESULT = r + " >> "+ p +" entitypop entitypop ";
                                  }
                              
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // setPhrase ::= id ARROW id ARROW setPhrase2 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p + " "+i1+" entitypush "+i2+" entitypush def entitypop entitypop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // setPhrase ::= id ARROW setPhrase2 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p + " "+i+" entitypush def entitypop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // setPhrase ::= setPhrase2 
            {
              String RESULT =null;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p + " def"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // setStatement ::= SET setPhrase 
            {
              String RESULT =null;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setStatement",6, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exitStatement ::= EXIT 
            {
              String RESULT =null;
		 RESULT =""; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("exitStatement",23, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conditionStatement ::= CPOSTFIX 
            {
              String RESULT =null;
		String pfx = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = pfx; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatement",5, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conditionStatement ::= bexpression 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatement",5, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // actionStatement ::= throwRulesException 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // actionStatement ::= removefromlist 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // actionStatement ::= LPAREN actionStatement RPAREN 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // actionStatement ::= USROPER 
            {
              String RESULT =null;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = opr; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // actionStatement ::= forAllEdgIndv 
            {
              String RESULT =null;
		String stmnt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // actionStatement ::= USING id NT$0 actionStatement 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT +=  stmt + " entitypop "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
 RESULT = id + " entitypush "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$0",50, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // actionStatement ::= APOSTFIX 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // actionStatement ::= DUMMY 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actionStatement ::= addtocontextStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // actionStatement ::= sortStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actionStatement ::= ifStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // actionStatement ::= copyStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // actionStatement ::= formGroupStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // actionStatement ::= findStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // actionStatement ::= someofeachStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // actionStatement ::= forallStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // actionStatement ::= wherehasStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // actionStatement ::= setStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // actionStatement ::= exitStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // actionStatement ::= performStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // actionStatementList ::= actionStatement EOP 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatementList",2, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // actionStatementList ::= actionStatementList actionStatement EOP 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list + " " + stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatementList",2, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conditionStatementList ::= conditionStatement EOP 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatementList",4, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conditionStatementList ::= actionStatementList conditionStatement EOP 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list + " " + stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatementList",4, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // commentblock ::= SKIP 
            {
              String RESULT =null;

              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commentblock",41, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statementList ::= statementList commentblock 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statementList ::= ACTION actionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  list +"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statementList ::= CONDITION conditionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  list+"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statementList ::= statementList ACTION actionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = list+ "\n" + list2+"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statementList ::= statementList CONDITION conditionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = list+"\n" + list2+"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= statementList EOP 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list; parser.done_parsing();
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("goal",0, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		RESULT = start_val;
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$DTRulesParser$parser.done_parsing();
          return CUP$DTRulesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

