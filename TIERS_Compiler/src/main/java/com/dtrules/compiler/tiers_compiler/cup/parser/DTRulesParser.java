
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 04 16:15:09 CDT 2011
//----------------------------------------------------

package com.dtrules.compiler.tiers_compiler.cup.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 04 16:15:09 CDT 2011
  */
public class DTRulesParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DTRulesParser() {super();}

  /** Constructor which sets the default scanner. */
  public DTRulesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DTRulesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\333\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\053\003\000\002\006\005\000" +
    "\002\006\004\000\002\004\005\000\002\004\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\064\002\000\002\005\006\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\007\003\000\002\007\003\000" +
    "\002\031\003\000\002\010\004\000\002\046\003\000\002" +
    "\046\005\000\002\046\007\000\002\046\004\000\002\046" +
    "\006\000\002\046\006\000\002\046\010\000\002\047\005" +
    "\000\002\047\005\000\002\012\006\000\002\011\003\000" +
    "\002\013\007\000\002\013\007\000\002\024\005\000\002" +
    "\024\005\000\002\024\006\000\002\024\003\000\002\025" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\010" +
    "\000\002\023\010\000\002\023\012\000\002\026\010\000" +
    "\002\026\010\000\002\026\010\000\002\026\006\000\002" +
    "\030\007\000\002\030\007\000\002\030\007\000\002\030" +
    "\011\000\002\030\011\000\002\030\012\000\002\030\012" +
    "\000\002\030\007\000\002\040\005\000\002\040\012\000" +
    "\002\014\007\000\002\034\006\000\002\027\004\000\002" +
    "\033\006\000\002\033\006\000\002\033\006\000\002\033" +
    "\006\000\002\033\004\000\002\033\006\000\002\037\011" +
    "\000\002\037\007\000\002\037\010\000\002\037\006\000" +
    "\002\035\004\000\002\035\006\000\002\015\007\000\002" +
    "\015\013\000\002\015\011\000\002\015\013\000\002\015" +
    "\011\000\002\015\007\000\002\015\005\000\002\015\007" +
    "\000\002\015\013\000\002\015\011\000\002\015\013\000" +
    "\002\015\011\000\002\015\007\000\002\015\005\000\002" +
    "\017\004\000\002\017\007\000\002\020\004\000\002\020" +
    "\006\000\002\020\005\000\002\021\005\000\002\021\004" +
    "\000\002\050\003\000\002\022\004\000\002\022\006\000" +
    "\002\022\005\000\002\032\011\000\002\036\012\000\002" +
    "\041\005\000\002\041\007\000\002\041\005\000\002\041" +
    "\007\000\002\042\007\000\002\042\011\000\002\043\004" +
    "\000\002\043\004\000\002\045\004\000\002\044\012\000" +
    "\002\044\010\000\002\044\013\000\002\044\011\000\002" +
    "\044\016\000\002\063\003\000\002\061\003\000\002\061" +
    "\005\000\002\061\006\000\002\061\006\000\002\061\006" +
    "\000\002\061\006\000\002\061\011\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\004\000\002\065\002\000\002\061" +
    "\006\000\002\061\007\000\002\061\003\000\002\061\006" +
    "\000\002\061\006\000\002\061\004\000\002\061\005\000" +
    "\002\061\004\000\002\061\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\005\000\002\055\004" +
    "\000\002\055\010\000\002\055\006\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\004\000\002\057\003\000\002\057\003\000\002\057" +
    "\004\000\002\057\003\000\002\062\005\000\002\062\006" +
    "\000\002\062\005\000\002\062\003\000\002\052\005\000" +
    "\002\052\003\000\002\066\002\000\002\051\010\000\002" +
    "\067\002\000\002\051\011\000\002\051\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\005\000\002\060\005" +
    "\000\002\060\003\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\004\000\002\060" +
    "\003\000\002\060\003\000\002\060\005\000\002\060\005" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\005\000\002\060" +
    "\005\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\003\000\002\060\003\000\002\060\005\000" +
    "\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0202\000\006\136\006\137\005\001\002\000\004\002" +
    "\u0204\001\002\000\062\011\341\026\017\053\155\054\102" +
    "\056\044\062\124\063\015\065\063\066\134\067\050\071" +
    "\157\075\143\076\136\102\144\103\140\105\065\106\145" +
    "\107\111\114\340\140\131\141\115\150\160\155\022\170" +
    "\130\001\002\000\170\006\125\011\047\024\051\026\017" +
    "\027\112\030\103\036\067\043\121\053\155\054\102\055" +
    "\064\056\044\057\077\060\041\062\124\063\015\065\063" +
    "\066\134\067\050\071\157\075\143\076\136\101\040\102" +
    "\144\103\140\105\065\106\145\107\111\114\146\115\027" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\126\140\131\141\115\142\120\146\036\150\160" +
    "\155\022\160\045\161\052\162\137\163\076\164\142\165" +
    "\156\166\055\167\057\170\130\171\016\172\046\173\025" +
    "\174\100\176\037\177\031\001\002\000\012\004\014\113" +
    "\010\136\013\137\012\001\002\000\002\001\ufffa\000\002" +
    "\001\ufffb\000\062\011\341\026\017\053\155\054\102\056" +
    "\044\062\124\063\015\065\063\066\134\067\050\071\157" +
    "\075\143\076\136\102\144\103\140\105\065\106\145\107" +
    "\111\114\340\140\131\141\115\150\160\155\022\170\130" +
    "\001\002\000\170\006\125\011\047\024\051\026\017\027" +
    "\112\030\103\036\067\043\121\053\155\054\102\055\064" +
    "\056\044\057\077\060\041\062\124\063\015\065\063\066" +
    "\134\067\050\071\157\075\143\076\136\101\040\102\144" +
    "\103\140\105\065\106\145\107\111\114\146\115\027\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\126\140\131\141\115\142\120\146\036\150\160\155" +
    "\022\160\045\161\052\162\137\163\076\164\142\165\156" +
    "\166\055\167\057\170\130\171\016\172\046\173\025\174" +
    "\100\176\037\177\031\001\002\000\002\001\000\000\004" +
    "\124\u01fd\001\002\000\002\001\uff2b\000\002\001\uffe9\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\012\015\274\017\271\023\272\157\273\001\uff7f\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\002\001\uff33\000\002\001\uff68\000\112\006\125\011" +
    "\170\024\051\027\112\030\103\036\067\043\121\057\077" +
    "\060\041\101\040\114\167\115\027\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\126\142\120" +
    "\146\036\160\045\161\052\162\137\163\076\164\142\165" +
    "\156\166\055\167\057\171\016\172\046\173\025\174\100" +
    "\176\037\177\031\001\002\000\012\004\u01ef\123\343\132" +
    "\344\133\345\001\002\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\042\005\201\006" +
    "\174\007\205\010\175\013\206\014\202\016\214\017\210" +
    "\020\176\021\213\022\177\031\203\033\200\045\211\047" +
    "\207\175\212\001\002\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\004\004\u01e4\001" +
    "\002\000\002\001\ufff0\000\002\001\uff45\000\016\126\u01d4" +
    "\131\073\164\142\165\156\166\055\174\100\001\002\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\004\052\u01cf\001\002\000\014\131\073\164\142\165" +
    "\156\166\055\174\100\001\002\000\112\006\125\011\170" +
    "\024\051\027\112\030\103\036\067\043\121\057\077\060" +
    "\041\101\040\114\167\115\027\116\151\117\020\121\066" +
    "\122\153\127\035\130\106\131\073\134\126\142\120\146" +
    "\036\160\045\161\052\162\137\163\076\164\142\165\156" +
    "\166\055\167\057\171\016\172\046\173\025\174\100\176" +
    "\037\177\031\001\002\000\002\001\ufff5\000\002\001\ufff2" +
    "\000\002\001\uffe4\000\004\174\u01cc\001\uff58\000\112\006" +
    "\125\011\170\024\051\027\112\030\103\036\067\043\121" +
    "\057\077\060\041\101\040\114\167\115\027\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\126" +
    "\142\120\146\036\160\045\161\052\162\137\163\076\164" +
    "\142\165\156\166\055\167\057\171\016\172\046\173\025" +
    "\174\100\176\037\177\031\001\002\000\166\006\125\011" +
    "\047\024\051\026\017\027\112\030\103\036\067\043\121" +
    "\053\155\054\102\056\044\057\077\060\041\062\124\063" +
    "\015\065\063\066\134\067\050\071\157\075\143\076\136" +
    "\101\040\102\144\103\140\105\065\106\145\107\111\114" +
    "\146\115\027\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\126\140\131\141\115\142\120\146" +
    "\036\150\160\155\022\160\045\161\052\162\137\163\076" +
    "\164\142\165\156\166\055\167\057\170\130\171\016\172" +
    "\046\173\025\174\100\176\037\177\031\001\002\000\004" +
    "\124\u01c5\001\002\000\112\006\125\011\170\024\051\027" +
    "\112\030\103\036\067\043\121\057\077\060\041\101\040" +
    "\114\167\115\027\116\151\117\020\121\066\122\153\127" +
    "\035\130\106\131\073\134\126\142\120\146\036\160\045" +
    "\161\052\162\137\163\076\164\142\165\156\166\055\167" +
    "\057\171\016\172\046\173\025\174\100\176\037\177\031" +
    "\001\002\000\002\001\uff57\000\002\001\uffff\000\170\006" +
    "\125\011\047\024\051\026\017\027\112\030\103\036\067" +
    "\043\121\053\155\054\102\055\064\056\044\057\077\060" +
    "\041\062\124\063\015\065\063\066\134\067\050\071\157" +
    "\075\143\076\136\101\040\102\144\103\140\105\065\106" +
    "\145\107\111\114\146\115\027\116\151\117\020\121\066" +
    "\122\153\127\035\130\106\131\073\134\126\140\131\141" +
    "\115\142\120\146\036\150\160\155\022\160\045\161\052" +
    "\162\137\163\076\164\142\165\156\166\055\167\057\170" +
    "\130\171\016\172\046\173\025\174\100\176\037\177\031" +
    "\001\002\000\002\001\uff62\000\002\001\ufff4\000\002\001" +
    "\uff66\000\004\157\u01bc\001\uff28\000\002\001\uffe1\000\002" +
    "\001\uff35\000\004\123\u01b0\001\002\000\002\001\uffdf\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\006\122\153\123\u01aa\001\002\000\052\006\125\011" +
    "\217\027\112\030\103\036\067\037\u0194\101\040\114\216" +
    "\131\073\146\036\160\045\161\052\162\137\164\142\165" +
    "\156\166\055\167\057\173\221\174\100\176\037\001\002" +
    "\000\002\001\uff3b\000\002\001\uffec\000\012\135\u018e\152" +
    "\u018d\153\u018c\174\164\001\uff67\000\014\131\073\164\142" +
    "\165\156\166\055\174\100\001\002\000\002\001\uffe0\000" +
    "\002\001\uff6e\000\002\001\uff2a\000\112\006\125\011\170" +
    "\024\051\027\112\030\103\036\067\043\121\057\077\060" +
    "\041\101\040\114\167\115\027\116\151\117\020\121\066" +
    "\122\153\127\035\130\106\131\073\134\126\142\120\146" +
    "\036\160\045\161\052\162\137\163\076\164\142\165\156" +
    "\166\055\167\057\171\016\172\046\173\025\174\100\176" +
    "\037\177\031\001\002\000\004\046\u012d\001\002\000\002" +
    "\001\uffee\000\002\001\uffe8\000\050\006\125\011\217\027" +
    "\112\030\103\036\067\101\040\114\216\131\073\146\036" +
    "\160\045\161\052\162\137\164\142\165\156\166\055\167" +
    "\057\173\221\174\100\176\037\001\002\000\002\001\uffeb" +
    "\000\002\001\uffe2\000\112\006\125\011\170\024\051\027" +
    "\112\030\103\036\067\043\121\057\077\060\041\101\040" +
    "\114\167\115\027\116\151\117\020\121\066\122\153\127" +
    "\035\130\106\131\073\134\126\142\120\146\036\160\045" +
    "\161\052\162\137\163\076\164\142\165\156\166\055\167" +
    "\057\171\016\172\046\173\025\174\100\176\037\177\031" +
    "\001\002\000\002\001\uff93\000\002\001\ufff1\000\014\131" +
    "\073\164\u0179\165\u017b\166\055\174\100\001\002\000\050" +
    "\006\125\011\217\027\112\030\103\036\067\101\040\114" +
    "\216\131\073\146\036\160\045\161\052\162\137\164\142" +
    "\165\156\166\055\167\057\173\221\174\100\176\037\001" +
    "\002\000\002\001\uffe5\000\002\001\uffef\000\006\164\u0174" +
    "\167\u0175\001\002\000\002\001\uff3c\000\002\001\uff32\000" +
    "\004\143\u016e\001\002\000\016\126\u0161\131\073\164\142" +
    "\165\156\166\055\174\100\001\002\000\002\001\uff34\000" +
    "\002\001\uffed\000\004\123\u015c\001\002\000\050\006\125" +
    "\011\217\027\112\030\103\036\067\101\040\114\216\131" +
    "\073\146\036\160\045\161\052\162\137\164\142\165\156" +
    "\166\055\167\057\173\221\174\100\176\037\001\002\000" +
    "\112\006\125\011\170\024\051\027\112\030\103\036\067" +
    "\043\121\057\077\060\041\101\040\114\167\115\027\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\126\142\120\146\036\160\045\161\052\162\137\163" +
    "\076\164\142\165\156\166\055\167\057\171\016\172\046" +
    "\173\025\174\100\176\037\177\031\001\002\000\002\001" +
    "\uffea\000\022\050\u0116\131\073\163\u0119\164\u011a\165\u0114" +
    "\166\u0118\173\u0117\174\100\001\002\000\002\001\uffde\000" +
    "\002\001\ufff3\000\002\001\uff31\000\006\123\u0140\124\u013f" +
    "\001\002\000\002\001\uff27\000\112\006\125\011\170\024" +
    "\051\027\112\030\103\036\067\043\121\057\077\060\041" +
    "\101\040\114\167\115\027\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\126\142\120\146\036" +
    "\160\045\161\052\162\137\163\076\164\142\165\156\166" +
    "\055\167\057\171\016\172\046\173\025\174\100\176\037" +
    "\177\031\001\002\000\002\001\uff55\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\002\001\uff7e" +
    "\000\002\001\uff64\000\004\044\u0110\001\002\000\014\131" +
    "\073\164\142\165\156\166\055\174\100\001\002\000\004" +
    "\165\u010a\001\002\000\014\131\073\164\142\165\307\166" +
    "\055\174\100\001\002\000\002\001\uff37\000\002\001\uff65" +
    "\000\014\131\073\164\142\165\156\166\055\174\100\001" +
    "\002\000\002\001\uff36\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\002\001\uff38\000\002\001" +
    "\uffd2\000\002\001\uff63\000\006\072\317\073\316\001\002" +
    "\000\016\131\073\147\161\164\142\165\156\166\055\174" +
    "\100\001\002\000\014\131\073\164\142\165\156\166\055" +
    "\174\100\001\002\000\006\151\163\174\164\001\002\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\002\001\uff60\000\006\123\166\174\164\001\uffab\000" +
    "\112\006\125\011\170\024\051\027\112\030\103\036\067" +
    "\043\121\057\077\060\041\101\040\114\167\115\027\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\126\142\120\146\036\160\045\161\052\162\137\163" +
    "\076\164\142\165\156\166\055\167\057\171\016\172\046" +
    "\173\025\174\100\176\037\177\031\001\002\000\014\131" +
    "\073\164\142\165\307\166\055\174\100\001\002\000\112" +
    "\006\125\011\170\024\051\027\112\030\103\036\067\043" +
    "\121\057\077\060\041\101\040\114\167\115\027\116\151" +
    "\117\020\121\066\122\153\127\035\130\106\131\073\134" +
    "\126\142\120\146\036\160\045\161\052\162\137\163\076" +
    "\164\142\165\156\166\055\167\057\171\016\172\046\173" +
    "\025\174\100\176\037\177\031\001\002\000\002\001\uffac" +
    "\000\014\012\270\015\274\017\271\023\272\157\273\001" +
    "\002\000\044\005\201\006\174\007\205\010\175\012\204" +
    "\013\206\014\202\016\214\017\210\020\176\021\213\022" +
    "\177\031\203\033\200\045\211\047\207\175\212\001\002" +
    "\000\050\006\125\011\217\027\112\030\103\036\067\101" +
    "\040\114\216\131\073\146\036\160\045\161\052\162\137" +
    "\164\142\165\156\166\055\167\057\173\221\174\100\176" +
    "\037\001\002\000\050\006\125\011\217\027\112\030\103" +
    "\036\067\101\040\114\216\131\073\146\036\160\045\161" +
    "\052\162\137\164\142\165\156\166\055\167\057\173\221" +
    "\174\100\176\037\001\002\000\050\006\125\011\217\027" +
    "\112\030\103\036\067\101\040\114\216\131\073\146\036" +
    "\160\045\161\052\162\137\164\142\165\156\166\055\167" +
    "\057\173\221\174\100\176\037\001\002\000\050\006\125" +
    "\011\217\027\112\030\103\036\067\101\040\114\216\131" +
    "\073\146\036\160\045\161\052\162\137\164\142\165\156" +
    "\166\055\167\057\173\221\174\100\176\037\001\002\000" +
    "\004\160\257\001\002\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\050\006\125\011" +
    "\217\027\112\030\103\036\067\101\040\114\216\131\073" +
    "\146\036\160\045\161\052\162\137\164\142\165\156\166" +
    "\055\167\057\173\221\174\100\176\037\001\002\000\050" +
    "\006\125\011\217\027\112\030\103\036\067\101\040\114" +
    "\216\131\073\146\036\160\045\161\052\162\137\164\142" +
    "\165\156\166\055\167\057\173\221\174\100\176\037\001" +
    "\002\000\002\001\uff7d\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\050\006\125\011" +
    "\217\027\112\030\103\036\067\101\040\114\216\131\073" +
    "\146\036\160\045\161\052\162\137\164\142\165\156\166" +
    "\055\167\057\173\221\174\100\176\037\001\002\000\004" +
    "\046\247\001\002\000\050\006\125\011\217\027\112\030" +
    "\103\036\067\101\040\114\216\131\073\146\036\160\045" +
    "\161\052\162\137\164\142\165\156\166\055\167\057\173" +
    "\221\174\100\176\037\001\002\000\004\046\232\001\002" +
    "\000\002\001\uff2d\000\050\006\125\011\217\027\112\030" +
    "\103\036\067\101\040\114\216\131\073\146\036\160\045" +
    "\161\052\162\137\164\142\165\156\166\055\167\057\173" +
    "\221\174\100\176\037\001\002\000\050\006\125\011\217" +
    "\027\112\030\103\036\067\101\040\114\216\131\073\146" +
    "\036\160\045\161\052\162\137\164\142\165\156\166\055" +
    "\167\057\173\221\174\100\176\037\001\002\000\006\045" +
    "\211\047\207\001\uff74\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\050\006\125\011\217\027" +
    "\112\030\103\036\067\101\040\114\216\131\073\146\036" +
    "\160\045\161\052\162\137\164\142\165\156\166\055\167" +
    "\057\173\221\174\100\176\037\001\002\000\006\135\223" +
    "\174\164\001\uff67\000\014\131\073\164\142\165\156\166" +
    "\055\174\100\001\002\000\004\174\164\001\uff6b\000\050" +
    "\006\125\011\217\027\112\030\103\036\067\101\040\114" +
    "\216\131\073\146\036\160\045\161\052\162\137\164\142" +
    "\165\156\166\055\167\057\173\221\174\100\176\037\001" +
    "\002\000\002\001\uff6a\000\026\005\201\006\174\007\205" +
    "\010\175\012\204\016\214\031\203\033\200\045\211\047" +
    "\207\001\002\000\004\174\164\001\uff71\000\050\006\125" +
    "\011\217\027\112\030\103\036\067\101\040\114\216\131" +
    "\073\146\036\160\045\161\052\162\137\164\142\165\156" +
    "\166\055\167\057\173\221\174\100\176\037\001\002\000" +
    "\024\005\201\006\174\007\205\010\175\016\214\031\203" +
    "\033\200\045\211\047\207\001\uff70\000\024\005\201\006" +
    "\174\007\205\010\175\016\214\031\203\033\200\045\211" +
    "\047\207\001\uff42\000\004\174\233\001\002\000\002\001" +
    "\uff6d\000\026\005\201\006\174\007\205\010\175\016\214" +
    "\025\uff4e\031\203\033\200\045\211\047\207\001\uff44\000" +
    "\004\025\236\001\002\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\030\005\201\006" +
    "\174\007\205\010\175\015\242\016\214\025\241\031\203" +
    "\033\200\045\211\047\207\001\uff51\000\002\001\uff4d\000" +
    "\052\006\125\011\217\015\244\027\112\030\103\036\067" +
    "\101\040\114\216\131\073\146\036\160\045\161\052\162" +
    "\137\164\142\165\156\166\055\167\057\173\221\174\100" +
    "\176\037\001\002\000\050\006\125\011\217\027\112\030" +
    "\103\036\067\101\040\114\216\131\073\146\036\160\045" +
    "\161\052\162\137\164\142\165\156\166\055\167\057\173" +
    "\221\174\100\176\037\001\002\000\002\001\uff52\000\050" +
    "\006\125\011\217\027\112\030\103\036\067\101\040\114" +
    "\216\131\073\146\036\160\045\161\052\162\137\164\142" +
    "\165\156\166\055\167\057\173\221\174\100\176\037\001" +
    "\002\000\002\001\uff54\000\002\001\uff53\000\004\174\250" +
    "\001\002\000\002\001\uff6c\000\024\005\201\006\174\007" +
    "\205\010\175\016\214\031\203\033\200\045\211\047\207" +
    "\001\uff47\000\006\045\211\047\207\001\uff77\000\026\005" +
    "\201\006\174\007\205\010\175\016\214\031\203\032\254" +
    "\033\200\045\211\047\207\001\002\000\002\001\uff7a\000" +
    "\024\005\201\006\174\007\205\010\175\016\214\031\203" +
    "\033\200\045\211\047\207\001\uff46\000\014\007\205\010" +
    "\175\016\214\045\211\047\207\001\uff75\000\004\034\260" +
    "\001\002\000\004\031\261\001\uff79\000\050\006\125\011" +
    "\217\027\112\030\103\036\067\101\040\114\216\131\073" +
    "\146\036\160\045\161\052\162\137\164\142\165\156\166" +
    "\055\167\057\173\221\174\100\176\037\001\002\000\026" +
    "\005\201\006\174\007\205\010\175\016\214\031\203\032" +
    "\263\033\200\045\211\047\207\001\002\000\002\001\uff78" +
    "\000\024\005\201\006\174\007\205\010\175\016\214\031" +
    "\203\033\200\045\211\047\207\001\uff41\000\024\005\201" +
    "\006\174\007\205\010\175\016\214\031\203\033\200\045" +
    "\211\047\207\001\uff43\000\006\045\211\047\207\001\uff76" +
    "\000\014\007\205\010\175\016\214\045\211\047\207\001" +
    "\uff73\000\002\001\uff2f\000\112\006\125\011\170\024\051" +
    "\027\112\030\103\036\067\043\121\057\077\060\041\101" +
    "\040\114\167\115\027\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\126\142\120\146\036\160" +
    "\045\161\052\162\137\163\076\164\142\165\156\166\055" +
    "\167\057\171\016\172\046\173\025\174\100\176\037\177" +
    "\031\001\002\000\112\006\125\011\170\024\051\027\112" +
    "\030\103\036\067\043\121\057\077\060\041\101\040\114" +
    "\167\115\027\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\126\142\120\146\036\160\045\161" +
    "\052\162\137\163\076\164\142\165\156\166\055\167\057" +
    "\171\016\172\046\173\025\174\100\176\037\177\031\001" +
    "\002\000\014\131\073\164\142\165\156\166\055\174\100" +
    "\001\002\000\112\006\125\011\170\024\051\027\112\030" +
    "\103\036\067\043\121\057\077\060\041\101\040\114\167" +
    "\115\027\116\151\117\020\121\066\122\153\127\035\130" +
    "\106\131\073\134\126\142\120\146\036\160\045\161\052" +
    "\162\137\163\076\164\142\165\156\166\055\167\057\171" +
    "\016\172\046\173\025\174\100\176\037\177\031\001\002" +
    "\000\006\017\271\023\272\001\uff3e\000\010\123\300\124" +
    "\277\174\164\001\uff8d\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\112\006\125\011\170\024" +
    "\051\027\112\030\103\036\067\043\121\057\077\060\041" +
    "\101\040\114\167\115\027\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\126\142\120\146\036" +
    "\160\045\161\052\162\137\163\076\164\142\165\156\166" +
    "\055\167\057\171\016\172\046\173\025\174\100\176\037" +
    "\177\031\001\002\000\010\015\274\017\271\023\272\001" +
    "\uff89\000\006\123\303\174\164\001\uff8c\000\112\006\125" +
    "\011\170\024\051\027\112\030\103\036\067\043\121\057" +
    "\077\060\041\101\040\114\167\115\027\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\126\142" +
    "\120\146\036\160\045\161\052\162\137\163\076\164\142" +
    "\165\156\166\055\167\057\171\016\172\046\173\025\174" +
    "\100\176\037\177\031\001\002\000\010\015\274\017\271" +
    "\023\272\001\uff88\000\004\017\271\001\uff3f\000\002\001" +
    "\uff40\000\070\006\125\011\170\024\051\036\067\043\121" +
    "\057\077\060\041\114\167\115\027\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\126\142\120" +
    "\163\076\164\142\165\156\166\055\171\016\172\046\173" +
    "\025\174\100\177\031\001\uff63\000\010\015\274\017\271" +
    "\023\272\001\uff30\000\006\151\312\174\164\001\002\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\006\123\314\174\164\001\uffad\000\112\006\125\011" +
    "\170\024\051\027\112\030\103\036\067\043\121\057\077" +
    "\060\041\101\040\114\167\115\027\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\126\142\120" +
    "\146\036\160\045\161\052\162\137\163\076\164\142\165" +
    "\156\166\055\167\057\171\016\172\046\173\025\174\100" +
    "\176\037\177\031\001\002\000\002\001\uffae\000\014\131" +
    "\073\164\142\165\156\166\055\174\100\001\002\000\014" +
    "\131\073\164\142\165\156\166\055\174\100\001\002\000" +
    "\006\074\321\174\164\001\002\000\014\131\073\164\142" +
    "\165\156\166\055\174\100\001\002\000\004\174\164\001" +
    "\uffd1\000\006\074\324\174\164\001\002\000\014\131\073" +
    "\164\142\165\156\166\055\174\100\001\002\000\004\174" +
    "\164\001\uffd0\000\010\122\153\123\327\174\164\001\uff92" +
    "\000\112\006\125\011\170\024\051\027\112\030\103\036" +
    "\067\043\121\057\077\060\041\101\040\114\167\115\027" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\126\142\120\146\036\160\045\161\052\162\137" +
    "\163\076\164\142\165\156\166\055\167\057\171\016\172" +
    "\046\173\025\174\100\176\037\177\031\001\002\000\002" +
    "\001\uff90\000\002\001\uff91\000\006\112\333\174\164\001" +
    "\uff9a\000\004\123\334\001\002\000\112\006\125\011\170" +
    "\024\051\027\112\030\103\036\067\043\121\057\077\060" +
    "\041\101\040\114\167\115\027\116\151\117\020\121\066" +
    "\122\153\127\035\130\106\131\073\134\126\142\120\146" +
    "\036\160\045\161\052\162\137\163\076\164\142\165\156" +
    "\166\055\167\057\171\016\172\046\173\025\174\100\176" +
    "\037\177\031\001\002\000\002\001\uff99\000\044\006\uff71" +
    "\027\uff71\030\uff71\036\uff71\101\uff71\131\uff71\146\uff71\160" +
    "\uff71\161\uff71\162\uff71\164\uff71\165\uff71\166\uff71\167\uff71" +
    "\173\uff71\174\164\176\uff71\001\uffe7\000\062\011\341\026" +
    "\017\053\155\054\102\056\044\062\124\063\015\065\063" +
    "\066\134\067\050\071\157\075\143\076\136\102\144\103" +
    "\140\105\065\106\145\107\111\114\340\140\131\141\115" +
    "\150\160\155\022\170\130\001\002\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\062\011\341" +
    "\026\017\053\155\054\102\056\044\062\124\063\015\065" +
    "\063\066\134\067\050\071\157\075\143\076\136\102\144" +
    "\103\140\105\065\106\145\107\111\114\340\140\131\141" +
    "\115\150\160\155\022\170\130\001\002\000\010\123\343" +
    "\132\344\133\345\001\uffe6\000\014\131\073\164\142\165" +
    "\156\166\055\174\100\001\002\000\014\131\073\164\142" +
    "\165\156\166\055\174\100\001\002\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\010\023\350" +
    "\124\347\174\164\001\uff9b\000\014\131\073\164\142\165" +
    "\156\166\055\174\100\001\002\000\014\131\073\164\142" +
    "\165\156\166\055\174\100\001\002\000\006\124\352\174" +
    "\164\001\002\000\014\131\073\164\142\165\156\166\055" +
    "\174\100\001\002\000\010\123\354\125\355\174\164\001" +
    "\uff9d\000\112\006\125\011\170\024\051\027\112\030\103" +
    "\036\067\043\121\057\077\060\041\101\040\114\167\115" +
    "\027\116\151\117\020\121\066\122\153\127\035\130\106" +
    "\131\073\134\126\142\120\146\036\160\045\161\052\162" +
    "\137\163\076\164\142\165\156\166\055\167\057\171\016" +
    "\172\046\173\025\174\100\176\037\177\031\001\002\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\004\174\164\001\uffa0\000\002\001\uff9e\000\006\123" +
    "\361\174\164\001\uff9c\000\112\006\125\011\170\024\051" +
    "\027\112\030\103\036\067\043\121\057\077\060\041\101" +
    "\040\114\167\115\027\116\151\117\020\121\066\122\153" +
    "\127\035\130\106\131\073\134\126\142\120\146\036\160" +
    "\045\161\052\162\137\163\076\164\142\165\156\166\055" +
    "\167\057\171\016\172\046\173\025\174\100\176\037\177" +
    "\031\001\002\000\002\001\uff9f\000\014\023\365\123\366" +
    "\124\364\125\367\174\164\001\uffa2\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\014\131\073" +
    "\164\142\165\156\166\055\174\100\001\002\000\112\006" +
    "\125\011\170\024\051\027\112\030\103\036\067\043\121" +
    "\057\077\060\041\101\040\114\167\115\027\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\126" +
    "\142\120\146\036\160\045\161\052\162\137\163\076\164" +
    "\142\165\156\166\055\167\057\171\016\172\046\173\025" +
    "\174\100\176\037\177\031\001\002\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\004\174\164" +
    "\001\uffa8\000\002\001\uffa1\000\006\124\373\174\164\001" +
    "\002\000\014\131\073\164\142\165\156\166\055\174\100" +
    "\001\002\000\010\123\375\125\376\174\164\001\uffa4\000" +
    "\112\006\125\011\170\024\051\027\112\030\103\036\067" +
    "\043\121\057\077\060\041\101\040\114\167\115\027\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\126\142\120\146\036\160\045\161\052\162\137\163" +
    "\076\164\142\165\156\166\055\167\057\171\016\172\046" +
    "\173\025\174\100\176\037\177\031\001\002\000\014\131" +
    "\073\164\142\165\156\166\055\174\100\001\002\000\004" +
    "\174\164\001\uffa7\000\002\001\uffa5\000\006\123\u0102\174" +
    "\164\001\uffa3\000\112\006\125\011\170\024\051\027\112" +
    "\030\103\036\067\043\121\057\077\060\041\101\040\114" +
    "\167\115\027\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\126\142\120\146\036\160\045\161" +
    "\052\162\137\163\076\164\142\165\156\166\055\167\057" +
    "\171\016\172\046\173\025\174\100\176\037\177\031\001" +
    "\002\000\002\001\uffa6\000\006\120\u0105\174\164\001\002" +
    "\000\112\006\125\011\170\024\051\027\112\030\103\036" +
    "\067\043\121\057\077\060\041\101\040\114\167\115\027" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\126\142\120\146\036\160\045\161\052\162\137" +
    "\163\076\164\142\165\156\166\055\167\057\171\016\172" +
    "\046\173\025\174\100\176\037\177\031\001\002\000\002" +
    "\001\uffb7\000\012\012\u0108\123\343\132\344\133\345\001" +
    "\002\000\002\001\uffe3\000\004\174\164\001\uffe7\000\004" +
    "\111\u010b\001\uffaa\000\062\011\341\026\017\053\155\054" +
    "\102\056\044\062\124\063\015\065\063\066\134\067\050" +
    "\071\157\075\143\076\136\102\144\103\140\105\065\106" +
    "\145\107\111\114\340\140\131\141\115\150\160\155\022" +
    "\170\130\001\002\000\010\123\343\132\344\133\345\001" +
    "\uffa9\000\006\110\u010e\174\164\001\002\000\014\131\073" +
    "\164\142\165\156\166\055\174\100\001\002\000\004\174" +
    "\164\001\uffb6\000\014\131\073\164\142\165\156\166\055" +
    "\174\100\001\002\000\006\100\u0112\174\164\001\002\000" +
    "\022\050\u0116\131\073\163\u0119\164\u011a\165\u0114\166\u0118" +
    "\173\u0117\174\100\001\002\000\004\025\u0126\001\uffba\000" +
    "\004\017\uff5b\001\uff63\000\006\135\u012f\174\164\001\002" +
    "\000\004\173\u0129\001\002\000\022\050\u0116\131\073\163" +
    "\u0119\164\u011a\165\u0114\166\u0118\173\u0117\174\100\001\002" +
    "\000\004\017\uff5a\001\uff62\000\002\001\uff5c\000\004\017" +
    "\uff5d\001\uff64\000\006\017\u011d\174\u011e\001\002\000\002" +
    "\001\uffdc\000\112\006\125\011\170\024\051\027\112\030" +
    "\103\036\067\043\121\057\077\060\041\101\040\114\167" +
    "\115\027\116\151\117\020\121\066\122\153\127\035\130" +
    "\106\131\073\134\126\142\120\146\u011f\160\045\161\052" +
    "\162\137\163\076\164\142\165\156\166\055\167\057\171" +
    "\016\172\046\173\025\174\100\176\037\177\031\001\002" +
    "\000\002\001\uff59\000\014\131\073\164\142\165\156\166" +
    "\055\174\100\001\002\000\002\001\uffd4\000\042\005\201" +
    "\006\174\007\205\010\175\013\206\014\202\016\214\017" +
    "\210\020\176\021\213\022\177\031\203\033\200\045\211" +
    "\047\207\175\212\001\uffd5\000\006\123\u0123\174\164\001" +
    "\uff85\000\112\006\125\011\170\024\051\027\112\030\103" +
    "\036\067\043\121\057\077\060\041\101\040\114\167\115" +
    "\027\116\151\117\020\121\066\122\153\127\035\130\106" +
    "\131\073\134\126\142\120\146\036\160\045\161\052\162" +
    "\137\163\076\164\142\165\156\166\055\167\057\171\016" +
    "\172\046\173\025\174\100\176\037\177\031\001\002\000" +
    "\002\001\uffd6\000\002\001\uffd9\000\004\170\u0127\001\002" +
    "\000\022\050\u0116\131\073\163\u0119\164\u011a\165\u0114\166" +
    "\u0118\173\u0117\174\100\001\002\000\004\025\u0126\001\uffd7" +
    "\000\014\131\073\164\142\165\156\166\055\174\100\001" +
    "\002\000\022\050\u0116\131\073\163\u0119\164\u011a\165\u0114" +
    "\166\u0118\173\u0117\174\u012c\001\002\000\002\001\uffd8\000" +
    "\004\046\u012d\001\uff60\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\004\174\164\001\uff61\000" +
    "\016\131\073\163\u0119\164\u011a\165\u0114\166\u0118\174\100" +
    "\001\002\000\006\135\u0134\174\164\001\002\000\006\017" +
    "\u0133\174\u011e\001\002\000\002\001\uffdb\000\112\006\125" +
    "\011\170\024\051\027\112\030\103\036\067\043\121\057" +
    "\077\060\041\101\040\114\167\115\027\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\126\142" +
    "\120\146\036\160\045\161\052\162\137\163\076\164\142" +
    "\165\156\166\055\167\057\171\016\172\046\173\025\174" +
    "\100\176\037\177\031\001\002\000\012\163\u0119\164\u0135" +
    "\165\u0138\166\u0137\001\002\000\002\001\uff5d\000\002\001" +
    "\uffda\000\002\001\uff5a\000\002\001\uff5b\000\006\104\u013a" +
    "\174\164\001\002\000\014\131\073\164\142\165\156\166" +
    "\055\174\100\001\002\000\004\174\164\001\uffb4\000\004" +
    "\077\u013d\001\002\000\062\011\341\026\017\053\155\054" +
    "\102\056\044\062\124\063\015\065\063\066\134\067\050" +
    "\071\157\075\143\076\136\102\144\103\140\105\065\106" +
    "\145\107\111\114\340\140\131\141\115\150\160\155\022" +
    "\170\130\001\002\000\010\123\343\132\344\133\345\001" +
    "\uffd3\000\014\131\073\164\142\165\156\166\055\174\100" +
    "\001\002\000\112\006\125\011\170\024\051\027\112\030" +
    "\103\036\067\043\121\057\077\060\041\101\040\114\167" +
    "\115\027\116\151\117\020\121\066\122\153\127\035\130" +
    "\106\131\073\134\126\142\120\146\036\160\045\161\052" +
    "\162\137\163\076\164\142\165\156\166\055\167\057\171" +
    "\016\172\046\173\025\174\100\176\037\177\031\001\002" +
    "\000\004\100\u0142\001\002\000\022\050\u0116\131\073\163" +
    "\u0119\164\u011a\165\u0114\166\u0118\173\u0117\174\100\001\002" +
    "\000\004\025\u0126\001\uffbf\000\006\123\u0145\174\164\001" +
    "\002\000\112\006\125\011\170\024\051\027\112\030\103" +
    "\036\067\043\121\057\077\060\041\101\040\114\167\115" +
    "\027\116\151\117\020\121\066\122\153\127\035\130\106" +
    "\131\073\134\126\142\120\146\036\160\045\161\052\162" +
    "\137\163\076\164\142\165\156\166\055\167\057\171\016" +
    "\172\046\173\025\174\100\176\037\177\031\001\002\000" +
    "\004\100\u0147\001\002\000\022\050\u0116\131\073\163\u0119" +
    "\164\u011a\165\u0114\166\u0118\173\u0117\174\100\001\002\000" +
    "\004\025\u0126\001\uffbe\000\004\025\u0126\001\uffdd\000\010" +
    "\015\u0155\025\u0153\061\u0154\001\002\000\004\144\u014d\001" +
    "\002\000\042\005\201\006\174\007\205\010\175\013\206" +
    "\014\202\016\214\017\210\020\176\021\213\022\177\031" +
    "\203\033\200\045\211\047\207\175\212\001\uffcc\000\014" +
    "\131\073\164\142\165\156\166\055\174\100\001\002\000" +
    "\006\124\u014f\174\164\001\002\000\014\131\073\164\142" +
    "\165\156\166\055\174\100\001\002\000\006\123\u0151\174" +
    "\164\001\002\000\112\006\125\011\170\024\051\027\112" +
    "\030\103\036\067\043\121\057\077\060\041\101\040\114" +
    "\167\115\027\116\151\117\020\121\066\122\153\127\035" +
    "\130\106\131\073\134\126\142\120\146\036\160\045\161" +
    "\052\162\137\163\076\164\142\165\156\166\055\167\057" +
    "\171\016\172\046\173\025\174\100\176\037\177\031\001" +
    "\002\000\002\001\uff8e\000\052\006\125\011\217\015\u0159" +
    "\027\112\030\103\036\067\101\040\114\216\131\073\146" +
    "\036\160\045\161\052\162\137\164\142\165\156\166\055" +
    "\167\057\173\221\174\100\176\037\001\002\000\050\006" +
    "\125\011\217\027\112\030\103\036\067\101\040\114\216" +
    "\131\073\146\036\160\045\161\052\162\137\164\142\165" +
    "\156\166\055\167\057\173\221\174\100\176\037\001\002" +
    "\000\050\006\125\011\217\027\112\030\103\036\067\101" +
    "\040\114\216\131\073\146\036\160\045\161\052\162\137" +
    "\164\142\165\156\166\055\167\057\173\221\174\100\176" +
    "\037\001\002\000\024\005\201\006\174\007\205\010\175" +
    "\016\214\031\203\033\200\045\211\047\207\001\uffcf\000" +
    "\024\005\201\006\174\007\205\010\175\016\214\031\203" +
    "\033\200\045\211\047\207\001\uffcb\000\024\005\201\006" +
    "\174\007\205\010\175\016\214\031\203\033\200\045\211" +
    "\047\207\001\uffce\000\050\006\125\011\217\027\112\030" +
    "\103\036\067\101\040\114\216\131\073\146\036\160\045" +
    "\161\052\162\137\164\142\165\156\166\055\167\057\173" +
    "\221\174\100\176\037\001\002\000\024\005\201\006\174" +
    "\007\205\010\175\016\214\031\203\033\200\045\211\047" +
    "\207\001\uffcd\000\002\001\uff72\000\112\006\125\011\170" +
    "\024\051\027\112\030\103\036\067\043\121\057\077\060" +
    "\041\101\040\114\167\115\027\116\151\117\020\121\066" +
    "\122\153\127\035\130\106\131\073\134\126\142\120\146" +
    "\036\160\045\161\052\162\137\163\076\164\142\165\156" +
    "\166\055\167\057\171\016\172\046\173\025\174\100\176" +
    "\037\177\031\001\002\000\004\100\u015e\001\002\000\022" +
    "\050\u0116\131\073\163\u0119\164\u011a\165\u0114\166\u0118\173" +
    "\u0117\174\100\001\002\000\004\025\u0126\001\uffc1\000\010" +
    "\044\u0166\124\u0167\174\164\001\002\000\004\124\u0162\001" +
    "\002\000\014\131\073\164\142\165\156\166\055\174\100" +
    "\001\002\000\006\123\u0164\174\164\001\uffc2\000\112\006" +
    "\125\011\170\024\051\027\112\030\103\036\067\043\121" +
    "\057\077\060\041\101\040\114\167\115\027\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\126" +
    "\142\120\146\036\160\045\161\052\162\137\163\076\164" +
    "\142\165\156\166\055\167\057\171\016\172\046\173\025" +
    "\174\100\176\037\177\031\001\002\000\002\001\uffc3\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\014\131\073\164\142\165\156\166\055\174\100\001" +
    "\002\000\006\123\u0169\174\164\001\002\000\112\006\125" +
    "\011\170\024\051\027\112\030\103\036\067\043\121\057" +
    "\077\060\041\101\040\114\167\115\027\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\126\142" +
    "\120\146\036\160\045\161\052\162\137\163\076\164\142" +
    "\165\156\166\055\167\057\171\016\172\046\173\025\174" +
    "\100\176\037\177\031\001\002\000\002\001\uffc4\000\006" +
    "\123\u016c\174\164\001\002\000\112\006\125\011\170\024" +
    "\051\027\112\030\103\036\067\043\121\057\077\060\041" +
    "\101\040\114\167\115\027\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\126\142\120\146\036" +
    "\160\045\161\052\162\137\163\076\164\142\165\156\166" +
    "\055\167\057\171\016\172\046\173\025\174\100\176\037" +
    "\177\031\001\002\000\002\001\uffc5\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\006\145\u0170" +
    "\174\164\001\002\000\014\131\073\164\142\165\156\166" +
    "\055\174\100\001\002\000\006\123\u0172\174\164\001\002" +
    "\000\112\006\125\011\170\024\051\027\112\030\103\036" +
    "\067\043\121\057\077\060\041\101\040\114\167\115\027" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\126\142\120\146\036\160\045\161\052\162\137" +
    "\163\076\164\142\165\156\166\055\167\057\171\016\172" +
    "\046\173\025\174\100\176\037\177\031\001\002\000\002" +
    "\001\uff8f\000\002\001\uff86\000\002\001\uff87\000\026\005" +
    "\201\006\174\007\205\010\175\015\u0177\016\214\031\203" +
    "\033\200\045\211\047\207\001\002\000\050\006\125\011" +
    "\217\027\112\030\103\036\067\101\040\114\216\131\073" +
    "\146\036\160\045\161\052\162\137\164\142\165\156\166" +
    "\055\167\057\173\221\174\100\176\037\001\002\000\024" +
    "\005\201\006\174\007\205\010\175\016\214\031\203\033" +
    "\200\045\211\047\207\001\uff7b\000\004\110\u0180\001\uff64" +
    "\000\006\154\u017f\174\164\001\002\000\004\110\u017c\001" +
    "\uff63\000\006\165\u017e\166\u017d\001\002\000\002\001\uffb2" +
    "\000\002\001\uffb3\000\002\001\uffb9\000\004\166\u0181\001" +
    "\002\000\002\001\uffb1\000\002\001\uffb5\000\026\005\201" +
    "\006\174\007\205\010\175\015\u0184\016\214\031\203\033" +
    "\200\045\211\047\207\001\002\000\050\006\125\011\217" +
    "\027\112\030\103\036\067\101\040\114\216\131\073\146" +
    "\036\160\045\161\052\162\137\164\142\165\156\166\055" +
    "\167\057\173\221\174\100\176\037\001\002\000\024\005" +
    "\201\006\174\007\205\010\175\016\214\031\203\033\200" +
    "\045\211\047\207\001\uff7c\000\012\015\274\017\271\023" +
    "\272\157\273\001\uff49\000\006\132\u0188\174\164\001\002" +
    "\000\014\131\073\164\142\165\156\166\055\174\100\001" +
    "\002\000\006\123\u018a\174\164\001\uff5e\000\112\006\125" +
    "\011\170\024\051\027\112\030\103\036\067\043\121\057" +
    "\077\060\041\101\040\114\167\115\027\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\126\142" +
    "\120\146\036\160\045\161\052\162\137\163\076\164\142" +
    "\165\156\166\055\167\057\171\016\172\046\173\025\174" +
    "\100\176\037\177\031\001\002\000\002\001\uff5f\000\014" +
    "\131\073\164\142\165\156\166\055\174\100\001\002\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\112\006\125\011\170\024\051\027\112\030\103\036" +
    "\067\043\121\057\077\060\041\101\040\114\167\115\027" +
    "\116\151\117\020\121\066\122\153\127\035\130\106\131" +
    "\073\134\126\142\120\146\036\160\045\161\052\162\137" +
    "\163\076\164\142\165\156\166\055\167\057\171\016\172" +
    "\046\173\025\174\100\176\037\177\031\001\002\000\002" +
    "\001\uff29\000\002\001\uff6a\000\004\174\164\001\uff3a\000" +
    "\004\174\164\001\uff39\000\026\005\201\006\174\007\205" +
    "\010\175\016\214\031\203\033\200\040\u019c\045\211\047" +
    "\207\001\002\000\050\006\125\011\217\027\112\030\103" +
    "\036\067\101\040\114\216\131\073\146\036\160\045\161" +
    "\052\162\137\164\142\165\156\166\055\167\057\173\221" +
    "\174\100\176\037\001\002\000\026\005\201\006\174\007" +
    "\205\010\175\016\214\031\203\033\200\040\u0196\045\211" +
    "\047\207\001\002\000\050\006\125\011\217\027\112\030" +
    "\103\036\067\101\040\114\216\131\073\146\036\160\045" +
    "\161\052\162\137\164\142\165\156\166\055\167\057\173" +
    "\221\174\100\176\037\001\002\000\026\005\201\006\174" +
    "\007\205\010\175\016\214\031\203\033\200\041\u0198\045" +
    "\211\047\207\001\002\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\026\005\201\006" +
    "\174\007\205\010\175\016\214\031\203\033\200\042\u019a" +
    "\045\211\047\207\001\uff81\000\050\006\125\011\217\027" +
    "\112\030\103\036\067\101\040\114\216\131\073\146\036" +
    "\160\045\161\052\162\137\164\142\165\156\166\055\167" +
    "\057\173\221\174\100\176\037\001\002\000\024\005\201" +
    "\006\174\007\205\010\175\016\214\031\203\033\200\045" +
    "\211\047\207\001\uff82\000\050\006\125\011\217\027\112" +
    "\030\103\036\067\101\040\114\216\131\073\146\036\160" +
    "\045\161\052\162\137\164\142\165\156\166\055\167\057" +
    "\173\221\174\100\176\037\001\002\000\030\005\201\006" +
    "\174\007\205\010\175\016\214\023\u019e\031\203\033\200" +
    "\041\u019f\045\211\047\207\001\002\000\050\006\125\011" +
    "\217\027\112\030\103\036\067\101\040\114\216\131\073" +
    "\146\036\160\045\161\052\162\137\164\142\165\156\166" +
    "\055\167\057\173\221\174\100\176\037\001\002\000\050" +
    "\006\125\011\217\027\112\030\103\036\067\101\040\114" +
    "\216\131\073\146\036\160\045\161\052\162\137\164\142" +
    "\165\156\166\055\167\057\173\221\174\100\176\037\001" +
    "\002\000\026\005\201\006\174\007\205\010\175\016\214" +
    "\031\203\033\200\042\u01a1\045\211\047\207\001\uff83\000" +
    "\050\006\125\011\217\027\112\030\103\036\067\101\040" +
    "\114\216\131\073\146\036\160\045\161\052\162\137\164" +
    "\142\165\156\166\055\167\057\173\221\174\100\176\037" +
    "\001\002\000\024\005\201\006\174\007\205\010\175\016" +
    "\214\031\203\033\200\045\211\047\207\001\uff84\000\026" +
    "\005\201\006\174\007\205\010\175\016\214\031\203\033" +
    "\200\041\u01a4\045\211\047\207\001\002\000\050\006\125" +
    "\011\217\027\112\030\103\036\067\101\040\114\216\131" +
    "\073\146\036\160\045\161\052\162\137\164\142\165\156" +
    "\166\055\167\057\173\221\174\100\176\037\001\002\000" +
    "\026\005\201\006\174\007\205\010\175\016\214\031\203" +
    "\033\200\042\u01a6\045\211\047\207\001\002\000\050\006" +
    "\125\011\217\027\112\030\103\036\067\101\040\114\216" +
    "\131\073\146\036\160\045\161\052\162\137\164\142\165" +
    "\156\166\055\167\057\173\221\174\100\176\037\001\002" +
    "\000\026\005\201\006\174\007\205\010\175\016\214\031" +
    "\203\033\200\045\211\047\207\051\u01a8\001\002\000\050" +
    "\006\125\011\217\027\112\030\103\036\067\101\040\114" +
    "\216\131\073\146\036\160\045\161\052\162\137\164\142" +
    "\165\156\166\055\167\057\173\221\174\100\176\037\001" +
    "\002\000\024\005\201\006\174\007\205\010\175\016\214" +
    "\031\203\033\200\045\211\047\207\001\uff80\000\112\006" +
    "\125\011\170\024\051\027\112\030\103\036\067\043\121" +
    "\057\077\060\041\101\040\114\167\115\027\116\151\117" +
    "\020\121\066\122\153\127\035\130\106\131\073\134\126" +
    "\142\120\146\036\160\045\161\052\162\137\163\076\164" +
    "\142\165\156\166\055\167\057\171\016\172\046\173\025" +
    "\174\100\176\037\177\031\001\002\000\002\001\uff94\000" +
    "\002\001\uff95\000\006\111\u01ae\174\164\001\uffb0\000\062" +
    "\011\341\026\017\053\155\054\102\056\044\062\124\063" +
    "\015\065\063\066\134\067\050\071\157\075\143\076\136" +
    "\102\144\103\140\105\065\106\145\107\111\114\340\140" +
    "\131\141\115\150\160\155\022\170\130\001\002\000\010" +
    "\123\343\132\344\133\345\001\uffaf\000\112\006\125\011" +
    "\170\024\051\027\112\030\103\036\067\043\121\057\077" +
    "\060\041\101\040\114\167\115\027\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\126\142\120" +
    "\146\036\160\045\161\052\162\137\163\076\164\142\165" +
    "\156\166\055\167\057\171\016\172\046\173\025\174\100" +
    "\176\037\177\031\001\002\000\006\064\u01b3\070\u01b2\001" +
    "\002\000\004\124\u01b8\001\002\000\004\124\u01b4\001\002" +
    "\000\014\131\073\164\142\165\156\166\055\174\100\001" +
    "\002\000\006\100\u01b6\174\164\001\002\000\022\050\u0116" +
    "\131\073\163\u0119\164\u011a\165\u0114\166\u0118\173\u0117\174" +
    "\100\001\002\000\004\025\u0126\001\uffbc\000\014\131\073" +
    "\164\142\165\156\166\055\174\100\001\002\000\006\100" +
    "\u01ba\174\164\001\002\000\022\050\u0116\131\073\163\u0119" +
    "\164\u011a\165\u0114\166\u0118\173\u0117\174\100\001\002\000" +
    "\004\025\u0126\001\uffbb\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\006\124\u01be\174\164\001" +
    "\uff8b\000\014\131\073\164\142\165\156\166\055\174\100" +
    "\001\002\000\004\174\164\001\uff8a\000\012\004\u01c3\123" +
    "\343\132\344\133\345\001\002\000\004\004\u01c2\001\002" +
    "\000\002\001\ufff9\000\002\001\ufff7\000\002\001\uff3d\000" +
    "\014\131\073\164\142\165\156\166\055\174\100\001\002" +
    "\000\006\123\u01c7\174\164\001\002\000\112\006\125\011" +
    "\170\024\051\027\112\030\103\036\067\043\121\057\077" +
    "\060\041\101\040\114\167\115\027\116\151\117\020\121" +
    "\066\122\153\127\035\130\106\131\073\134\126\142\120" +
    "\146\036\160\045\161\052\162\137\163\076\164\142\165" +
    "\156\166\055\167\057\171\016\172\046\173\025\174\100" +
    "\176\037\177\031\001\002\000\004\100\u01c9\001\002\000" +
    "\022\050\u0116\131\073\163\u0119\164\u011a\165\u0114\166\u0118" +
    "\173\u0117\174\100\001\002\000\004\025\u0126\001\uffbd\000" +
    "\012\015\274\017\271\023\272\157\273\001\uff2e\000\002" +
    "\001\uff56\000\012\015\274\017\271\023\272\157\273\001" +
    "\uff48\000\004\174\164\001\uff69\000\050\006\125\011\217" +
    "\027\112\030\103\036\067\101\040\114\216\131\073\146" +
    "\036\160\045\161\052\162\137\164\142\165\156\166\055" +
    "\167\057\173\221\174\100\176\037\001\002\000\026\005" +
    "\201\006\174\007\205\010\175\016\214\023\u01d1\031\203" +
    "\033\200\045\211\047\207\001\002\000\050\006\125\011" +
    "\217\027\112\030\103\036\067\101\040\114\216\131\073" +
    "\146\036\160\045\161\052\162\137\164\142\165\156\166" +
    "\055\167\057\173\221\174\100\176\037\001\002\000\024" +
    "\005\201\006\174\007\205\010\175\016\214\031\203\033" +
    "\200\045\211\047\207\001\uff6f\000\004\174\164\001\uff85" +
    "\000\004\124\u01e0\001\002\000\010\023\u01d7\124\u01d6\174" +
    "\164\001\002\000\014\131\073\164\142\165\156\166\055" +
    "\174\100\001\002\000\014\131\073\164\142\165\156\166" +
    "\055\174\100\001\002\000\006\124\u01d9\174\164\001\002" +
    "\000\014\131\073\164\142\165\156\166\055\174\100\001" +
    "\002\000\006\123\u01db\174\164\001\002\000\112\006\125" +
    "\011\170\024\051\027\112\030\103\036\067\043\121\057" +
    "\077\060\041\101\040\114\167\115\027\116\151\117\020" +
    "\121\066\122\153\127\035\130\106\131\073\134\126\142" +
    "\120\146\036\160\045\161\052\162\137\163\076\164\142" +
    "\165\156\166\055\167\057\171\016\172\046\173\025\174" +
    "\100\176\037\177\031\001\002\000\002\001\uffc6\000\006" +
    "\123\u01de\174\164\001\uffca\000\112\006\125\011\170\024" +
    "\051\027\112\030\103\036\067\043\121\057\077\060\041" +
    "\101\040\114\167\115\027\116\151\117\020\121\066\122" +
    "\153\127\035\130\106\131\073\134\126\142\120\146\036" +
    "\160\045\161\052\162\137\163\076\164\142\165\156\166" +
    "\055\167\057\171\016\172\046\173\025\174\100\176\037" +
    "\177\031\001\002\000\002\001\uffc8\000\014\131\073\164" +
    "\142\165\156\166\055\174\100\001\002\000\006\123\u01e2" +
    "\174\164\001\uffc9\000\112\006\125\011\170\024\051\027" +
    "\112\030\103\036\067\043\121\057\077\060\041\101\040" +
    "\114\167\115\027\116\151\117\020\121\066\122\153\127" +
    "\035\130\106\131\073\134\126\142\120\146\036\160\045" +
    "\161\052\162\137\163\076\164\142\165\156\166\055\167" +
    "\057\171\016\172\046\173\025\174\100\176\037\177\031" +
    "\001\002\000\002\001\uffc7\000\002\001\ufff8\000\002\001" +
    "\uff4a\000\026\005\201\006\174\007\205\010\175\016\214" +
    "\025\u01e7\031\203\033\200\045\211\047\207\001\uff4f\000" +
    "\050\006\125\011\217\027\112\030\103\036\067\101\040" +
    "\114\216\131\073\146\036\160\045\161\052\162\137\164" +
    "\142\165\156\166\055\167\057\173\221\174\100\176\037" +
    "\001\002\000\002\001\uff50\000\026\005\201\006\174\007" +
    "\205\010\175\016\214\017\u01ea\031\203\033\200\045\211" +
    "\047\207\001\002\000\050\006\125\011\217\027\112\030" +
    "\103\036\067\101\040\114\216\131\073\146\036\160\045" +
    "\161\052\162\137\164\142\165\156\166\055\167\057\173" +
    "\221\174\100\176\037\001\002\000\024\005\201\006\174" +
    "\007\205\010\175\016\214\031\203\033\200\045\211\047" +
    "\207\001\uff4c\000\004\025\u01ed\001\002\000\050\006\125" +
    "\011\217\027\112\030\103\036\067\101\040\114\216\131" +
    "\073\146\036\160\045\161\052\162\137\164\142\165\156" +
    "\166\055\167\057\173\221\174\100\176\037\001\002\000" +
    "\002\001\uff4b\000\002\001\ufff6\000\002\001\uff2c\000\012" +
    "\135\u018e\152\u018d\153\u018c\174\164\001\uff6b\000\006\124" +
    "\u01f3\174\164\001\002\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\006\123\u01f5\174\164\001" +
    "\002\000\112\006\125\011\170\024\051\027\112\030\103" +
    "\036\067\043\121\057\077\060\041\101\040\114\167\115" +
    "\027\116\151\117\020\121\066\122\153\127\035\130\106" +
    "\131\073\134\126\142\120\146\036\160\045\161\052\162" +
    "\137\163\076\164\142\165\156\166\055\167\057\171\016" +
    "\172\046\173\025\174\100\176\037\177\031\001\002\000" +
    "\004\156\u01f7\001\002\000\004\154\u01f8\001\002\000\002" +
    "\001\uffb8\000\010\122\153\123\u01fa\174\164\001\uff98\000" +
    "\112\006\125\011\170\024\051\027\112\030\103\036\067" +
    "\043\121\057\077\060\041\101\040\114\167\115\027\116" +
    "\151\117\020\121\066\122\153\127\035\130\106\131\073" +
    "\134\126\142\120\146\036\160\045\161\052\162\137\163" +
    "\076\164\142\165\156\166\055\167\057\171\016\172\046" +
    "\173\025\174\100\176\037\177\031\001\002\000\002\001" +
    "\uff96\000\002\001\uff97\000\014\131\073\164\142\165\156" +
    "\166\055\174\100\001\002\000\006\100\u01ff\174\164\001" +
    "\002\000\022\050\u0116\131\073\163\u0119\164\u011a\165\u0114" +
    "\166\u0118\173\u0117\174\100\001\002\000\004\025\u0126\001" +
    "\uffc0\000\062\011\341\026\017\053\155\054\102\056\044" +
    "\062\124\063\015\065\063\066\134\067\050\071\157\075" +
    "\143\076\136\102\144\103\140\105\065\106\145\107\111" +
    "\114\340\140\131\141\115\150\160\155\022\170\130\001" +
    "\ufffe\000\002\001\ufffd\000\062\011\341\026\017\053\155" +
    "\054\102\056\044\062\124\063\015\065\063\066\134\067" +
    "\050\071\157\075\143\076\136\102\144\103\140\105\065" +
    "\106\145\107\111\114\340\140\131\141\115\150\160\155" +
    "\022\170\130\001\ufffc\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0202\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\044\004\u0202\005\025\010\131\011\041\012\070" +
    "\013\103\014\042\015\107\016\032\030\113\031\055\033" +
    "\100\034\122\035\112\037\104\040\126\043\060\001\001" +
    "\000\124\004\053\005\025\006\u0201\007\031\010\131\011" +
    "\041\012\070\013\103\014\042\015\107\016\032\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\030\113\031\055\032\116\033\100\034\122\035\112" +
    "\036\067\037\104\040\126\041\057\042\134\043\060\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\020\061\027\063\073\001\001\000\004\053\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\u0200" +
    "\005\025\010\131\011\041\012\070\013\103\014\042\015" +
    "\107\016\032\030\113\031\055\033\100\034\122\035\112" +
    "\037\104\040\126\043\060\001\001\000\124\004\053\005" +
    "\025\006\052\007\031\010\131\011\041\012\070\013\103" +
    "\014\042\015\107\016\032\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\030\113\031\055" +
    "\032\116\033\100\034\122\035\112\036\067\037\104\040" +
    "\126\041\057\042\134\043\060\044\074\045\023\050\115" +
    "\051\033\054\140\055\071\057\147\060\020\061\027\063" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u01f8\001\001\000" +
    "\002\001\001\000\004\055\u01f1\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\067" +
    "\041\057\042\134\044\074\045\023\050\115\051\033\054" +
    "\140\055\u01f0\057\147\060\u01ef\061\027\001\001\000\002" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u01e8\001\001\000\002\001\001\000\020\044\074" +
    "\045\023\052\u01e4\054\140\055\217\057\147\061\u01e5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\u01d4\001\001\000\004\055\u01d2\001\001\000" +
    "\002\001\001\000\004\055\u01cd\001\001\000\054\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\067\041\057\042\134\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\u01cc\061" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\017\132\020\153\021" +
    "\146\022\106\023\061\025\121\026\022\027\151\032\116" +
    "\036\067\041\057\042\134\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\u01ca\061\027\001\001" +
    "\000\114\005\u0106\010\131\011\041\012\070\013\103\014" +
    "\042\015\107\016\032\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\030\113\031\055\032" +
    "\116\033\100\034\122\035\112\036\067\037\104\040\126" +
    "\041\057\042\134\043\060\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\171\061\172\001\001" +
    "\000\002\001\001\000\054\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\067" +
    "\041\057\042\134\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\u01c3\061\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\120\005\u01bf\007\u01c0\010" +
    "\131\011\041\012\070\013\103\014\042\015\107\016\032" +
    "\017\132\020\153\021\146\022\106\023\061\025\121\026" +
    "\022\027\151\030\113\031\055\032\116\033\100\034\122" +
    "\035\112\036\067\037\104\040\126\041\057\042\134\043" +
    "\060\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u01ac\001\001\000\004\022\u01aa" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0186\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\067\041\057\042\134\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\u0185\061" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u0182\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\017\132\020\153\021\146\022\106\023\061\025" +
    "\121\026\022\027\151\032\116\036\067\041\057\042\134" +
    "\044\074\045\023\050\115\051\033\054\140\055\071\057" +
    "\147\060\020\061\027\063\u0181\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0179\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\u0175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u015f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\074\045\023\054\140\055\217" +
    "\057\147\061\u015a\001\001\000\060\017\132\020\153\021" +
    "\146\022\106\023\061\024\u0149\025\121\026\022\027\151" +
    "\032\116\036\067\041\057\042\134\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\u014b" +
    "\063\u014a\001\001\000\002\001\001\000\012\046\u0148\047" +
    "\u011b\055\u0114\056\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\u013b\001\001\000\002\001" +
    "\001\000\004\055\u0138\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u010c\001\001\000" +
    "\002\001\001\000\004\055\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\331\001\001\000\002\001" +
    "\001\000\004\055\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\161\001\001\000\004\055\310\001\001\000\002\001\001" +
    "\000\004\055\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\170\001\001\000\004\055" +
    "\225\001\001\000\054\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\067\041" +
    "\057\042\134\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\171\061\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\266\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\265" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\264\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\263\001\001\000\002\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\255" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\254\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\252\001\001\000\002\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\251" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\250\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\074\045\023" +
    "\054\140\055\217\057\147\061\230\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\214\001\001" +
    "\000\002\001\001\000\004\055\225\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\224\001\001" +
    "\000\002\001\001\000\004\055\221\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\226\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\234\001\001\000\002\001\001\000\020\044\074\045" +
    "\023\054\140\055\217\057\147\061\236\062\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\044\074\045" +
    "\023\054\140\055\217\057\147\061\236\062\244\001\001" +
    "\000\020\044\074\045\023\054\140\055\217\057\147\061" +
    "\236\062\242\001\001\000\002\001\001\000\020\044\074" +
    "\045\023\054\140\055\217\057\147\061\236\062\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\074\045\023\054\140\055\217\057\147\061\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\067\041\057" +
    "\042\134\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\305\061\027\001\001\000\054\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\067\041\057\042\134\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\304\061" +
    "\027\001\001\000\004\055\275\001\001\000\054\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\067\041\057\042\134\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\274\061" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\301\001\001\000\054\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\067" +
    "\041\057\042\134\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\300\061\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\017\132\020\153\021" +
    "\146\022\106\023\061\025\121\026\022\027\151\032\116" +
    "\036\067\041\057\042\134\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\303\061\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\017\132\020\153\021\146\022\106\023\061\025\121" +
    "\026\022\027\151\032\116\036\067\041\057\042\134\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\307\061\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\312\001\001\000\002\001\001\000\056" +
    "\017\132\020\153\021\146\022\106\023\061\025\121\026" +
    "\022\027\151\032\116\036\067\041\057\042\134\044\074" +
    "\045\023\050\115\051\033\054\140\055\071\057\147\060" +
    "\020\061\027\063\314\001\001\000\002\001\001\000\004" +
    "\055\322\001\001\000\004\055\317\001\001\000\002\001" +
    "\001\000\004\055\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\324\001\001\000\002\001\001\000" +
    "\004\022\327\001\001\000\056\017\132\020\153\021\146" +
    "\022\106\023\061\025\121\026\022\027\151\032\116\036" +
    "\067\041\057\042\134\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\027\063\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\067" +
    "\041\057\042\134\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\020\061\027\063\334\001\001" +
    "\000\002\001\001\000\006\064\336\065\226\001\001\000" +
    "\042\005\341\010\131\011\041\012\070\013\103\014\042" +
    "\015\107\016\032\030\113\031\055\033\100\034\122\035" +
    "\112\037\104\040\126\043\060\001\001\000\004\055\u0108" +
    "\001\001\000\042\005\u0106\010\131\011\041\012\070\013" +
    "\103\014\042\015\107\016\032\030\113\031\055\033\100" +
    "\034\122\035\112\037\104\040\126\043\060\001\001\000" +
    "\002\001\001\000\004\055\u0103\001\001\000\004\055\362" +
    "\001\001\000\004\055\345\001\001\000\002\001\001\000" +
    "\004\055\357\001\001\000\004\055\350\001\001\000\002" +
    "\001\001\000\004\055\352\001\001\000\002\001\001\000" +
    "\056\017\132\020\153\021\146\022\106\023\061\025\121" +
    "\026\022\027\151\032\116\036\067\041\057\042\134\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\020\061\027\063\356\001\001\000\004\055\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\017\132\020\153\021\146\022\106\023\061\025" +
    "\121\026\022\027\151\032\116\036\067\041\057\042\134" +
    "\044\074\045\023\050\115\051\033\054\140\055\071\057" +
    "\147\060\020\061\027\063\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0100\001\001\000\004\055" +
    "\371\001\001\000\056\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\067\041" +
    "\057\042\134\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\020\061\027\063\370\001\001\000" +
    "\004\055\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\373\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\377\001\001\000\004\055" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\067\041\057" +
    "\042\134\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\020\061\027\063\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\017\132\020\153\021" +
    "\146\022\106\023\061\025\121\026\022\027\151\032\116" +
    "\036\067\041\057\042\134\044\074\045\023\050\115\051" +
    "\033\054\140\055\071\057\147\060\020\061\027\063\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\336\001\001\000\002\001\001\000\042" +
    "\005\u010b\010\131\011\041\012\070\013\103\014\042\015" +
    "\107\016\032\030\113\031\055\033\100\034\122\035\112" +
    "\037\104\040\126\043\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u010e\001\001\000\002\001\001" +
    "\000\004\055\u0110\001\001\000\002\001\001\000\012\046" +
    "\u0112\047\u011b\055\u0114\056\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\u0124\047\u011b\055\u0114\056\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\017\132\020\153\021\146" +
    "\022\106\023\061\025\121\026\022\027\151\032\116\036" +
    "\067\041\057\042\134\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\u0120\063\u011f\001" +
    "\001\000\002\001\001\000\004\055\u0121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\017" +
    "\132\020\153\021\146\022\106\023\061\025\121\026\022" +
    "\027\151\032\116\036\067\041\057\042\134\044\074\045" +
    "\023\050\115\051\033\054\140\055\071\057\147\060\020" +
    "\061\027\063\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\u0127\047\u011b\055\u0114" +
    "\056\u011a\001\001\000\002\001\001\000\004\055\u0129\001" +
    "\001\000\012\046\u012a\047\u011b\055\u0114\056\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u012d\001" +
    "\001\000\002\001\001\000\010\047\u0131\055\u012f\056\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\u0120\063\u011f\001\001\000\006\047" +
    "\u0135\056\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\u013d\010\131\011\041\012\070\013\103\014" +
    "\042\015\107\016\032\030\113\031\055\033\100\034\122" +
    "\035\112\037\104\040\126\043\060\001\001\000\002\001" +
    "\001\000\004\055\u0143\001\001\000\056\017\132\020\153" +
    "\021\146\022\106\023\061\025\121\026\022\027\151\032" +
    "\116\036\067\041\057\042\134\044\074\045\023\050\115" +
    "\051\033\054\140\055\071\057\147\060\020\061\027\063" +
    "\u0140\001\001\000\002\001\001\000\012\046\u0142\047\u011b" +
    "\055\u0114\056\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\u0145\001\001\000\002\001" +
    "\001\000\012\046\u0147\047\u011b\055\u0114\056\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u014d\001\001" +
    "\000\002\001\001\000\004\055\u014f\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\u0151\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u0157\001\001\000\016\044\074\045\023\054\140\055" +
    "\217\057\147\061\u0156\001\001\000\016\044\074\045\023" +
    "\054\140\055\217\057\147\061\u0155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\u0159\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\017\132\020\153" +
    "\021\146\022\106\023\061\025\121\026\022\027\151\032" +
    "\116\036\067\041\057\042\134\044\074\045\023\050\115" +
    "\051\033\054\140\055\071\057\147\060\020\061\027\063" +
    "\u015c\001\001\000\002\001\001\000\012\046\u015e\047\u011b" +
    "\055\u0114\056\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u0162\001\001\000\002" +
    "\001\001\000\056\017\132\020\153\021\146\022\106\023" +
    "\061\025\121\026\022\027\151\032\116\036\067\041\057" +
    "\042\134\044\074\045\023\050\115\051\033\054\140\055" +
    "\071\057\147\060\020\061\027\063\u0164\001\001\000\002" +
    "\001\001\000\004\055\u016a\001\001\000\004\055\u0167\001" +
    "\001\000\002\001\001\000\056\017\132\020\153\021\146" +
    "\022\106\023\061\025\121\026\022\027\151\032\116\036" +
    "\067\041\057\042\134\044\074\045\023\050\115\051\033" +
    "\054\140\055\071\057\147\060\020\061\027\063\u0169\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\017\132" +
    "\020\153\021\146\022\106\023\061\025\121\026\022\027" +
    "\151\032\116\036\067\041\057\042\134\044\074\045\023" +
    "\050\115\051\033\054\140\055\071\057\147\060\020\061" +
    "\027\063\u016c\001\001\000\002\001\001\000\004\055\u016e" +
    "\001\001\000\002\001\001\000\004\055\u0170\001\001\000" +
    "\002\001\001\000\056\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\067\041" +
    "\057\042\134\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\020\061\027\063\u0172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u0177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u0188\001\001\000\002\001\001" +
    "\000\056\017\132\020\153\021\146\022\106\023\061\025" +
    "\121\026\022\027\151\032\116\036\067\041\057\042\134" +
    "\044\074\045\023\050\115\051\033\054\140\055\071\057" +
    "\147\060\020\061\027\063\u018a\001\001\000\002\001\001" +
    "\000\004\055\u0191\001\001\000\004\055\u0190\001\001\000" +
    "\054\017\132\020\153\021\146\022\106\023\061\025\121" +
    "\026\022\027\151\032\116\036\067\041\057\042\134\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\u018e\061\u018f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\044\074\045\023\054\140\055\217\057\147\061" +
    "\u0194\001\001\000\002\001\001\000\016\044\074\045\023" +
    "\054\140\055\217\057\147\061\u0196\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u0198\001\001\000\002\001\001\000\016\044\074\045" +
    "\023\054\140\055\217\057\147\061\u019a\001\001\000\002" +
    "\001\001\000\016\044\074\045\023\054\140\055\217\057" +
    "\147\061\u019c\001\001\000\002\001\001\000\016\044\074" +
    "\045\023\054\140\055\217\057\147\061\u01a2\001\001\000" +
    "\016\044\074\045\023\054\140\055\217\057\147\061\u019f" +
    "\001\001\000\002\001\001\000\016\044\074\045\023\054" +
    "\140\055\217\057\147\061\u01a1\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\074\045\023\054\140\055" +
    "\217\057\147\061\u01a4\001\001\000\002\001\001\000\016" +
    "\044\074\045\023\054\140\055\217\057\147\061\u01a6\001" +
    "\001\000\002\001\001\000\016\044\074\045\023\054\140" +
    "\055\217\057\147\061\u01a8\001\001\000\002\001\001\000" +
    "\056\017\132\020\153\021\146\022\106\023\061\025\121" +
    "\026\022\027\151\032\116\036\067\041\057\042\134\044" +
    "\074\045\023\050\115\051\033\054\140\055\071\057\147" +
    "\060\020\061\027\063\u01ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\u01ae\010\131" +
    "\011\041\012\070\013\103\014\042\015\107\016\032\030" +
    "\113\031\055\033\100\034\122\035\112\037\104\040\126" +
    "\043\060\001\001\000\002\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\067\041\057\042\134\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\027" +
    "\063\u01b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u01b4\001\001\000\002\001\001" +
    "\000\012\046\u01b6\047\u011b\055\u0114\056\u011a\001\001\000" +
    "\002\001\001\000\004\055\u01b8\001\001\000\002\001\001" +
    "\000\012\046\u01ba\047\u011b\055\u0114\056\u011a\001\001\000" +
    "\002\001\001\000\004\055\u01bc\001\001\000\002\001\001" +
    "\000\004\055\u01be\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u01c5\001\001\000\002\001" +
    "\001\000\056\017\132\020\153\021\146\022\106\023\061" +
    "\025\121\026\022\027\151\032\116\036\067\041\057\042" +
    "\134\044\074\045\023\050\115\051\033\054\140\055\071" +
    "\057\147\060\020\061\027\063\u01c7\001\001\000\002\001" +
    "\001\000\012\046\u01c9\047\u011b\055\u0114\056\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\074\045\023" +
    "\054\140\055\217\057\147\061\u01cf\001\001\000\002\001" +
    "\001\000\016\044\074\045\023\054\140\055\217\057\147" +
    "\061\u01d1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u01dc\001\001" +
    "\000\004\055\u01d7\001\001\000\002\001\001\000\004\055" +
    "\u01d9\001\001\000\002\001\001\000\056\017\132\020\153" +
    "\021\146\022\106\023\061\025\121\026\022\027\151\032" +
    "\116\036\067\041\057\042\134\044\074\045\023\050\115" +
    "\051\033\054\140\055\071\057\147\060\020\061\027\063" +
    "\u01db\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\017\132\020\153\021\146\022\106\023\061\025\121\026" +
    "\022\027\151\032\116\036\067\041\057\042\134\044\074" +
    "\045\023\050\115\051\033\054\140\055\071\057\147\060" +
    "\020\061\027\063\u01de\001\001\000\002\001\001\000\004" +
    "\055\u01e0\001\001\000\002\001\001\000\056\017\132\020" +
    "\153\021\146\022\106\023\061\025\121\026\022\027\151" +
    "\032\116\036\067\041\057\042\134\044\074\045\023\050" +
    "\115\051\033\054\140\055\071\057\147\060\020\061\027" +
    "\063\u01e2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\044\074\045\023" +
    "\052\u01e7\054\140\055\217\057\147\061\u01e5\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\074\045\023" +
    "\054\140\055\217\057\147\061\u01ea\001\001\000\004\067" +
    "\u01eb\001\001\000\002\001\001\000\020\044\074\045\023" +
    "\054\140\055\217\057\147\061\236\062\u01ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u01f3\001\001\000" +
    "\002\001\001\000\056\017\132\020\153\021\146\022\106" +
    "\023\061\025\121\026\022\027\151\032\116\036\067\041" +
    "\057\042\134\044\074\045\023\050\115\051\033\054\140" +
    "\055\071\057\147\060\020\061\027\063\u01f5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u01fa\001\001\000\056\017\132\020\153\021\146\022" +
    "\106\023\061\025\121\026\022\027\151\032\116\036\067" +
    "\041\057\042\134\044\074\045\023\050\115\051\033\054" +
    "\140\055\071\057\147\060\020\061\027\063\u01fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u01fd\001" +
    "\001\000\002\001\001\000\012\046\u01ff\047\u011b\055\u0114" +
    "\056\u011a\001\001\000\002\001\001\000\042\005\u01bf\010" +
    "\131\011\041\012\070\013\103\014\042\015\107\016\032" +
    "\030\113\031\055\033\100\034\122\035\112\037\104\040" +
    "\126\043\060\001\001\000\002\001\001\000\042\005\u01bf" +
    "\010\131\011\041\012\070\013\103\014\042\015\107\016" +
    "\032\030\113\031\055\033\100\034\122\035\112\037\104" +
    "\040\126\043\060\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DTRulesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DTRulesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DTRulesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
        
            
    public void report_error(String message, Object info) 
    			throws Error
    {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {      
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)   
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m);
	    this.done_parsing();
	    throw new Error(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) 
    		throws Error
    {
        report_error(message, info);    
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DTRulesParser$actions {



    private String firstexp;		
    
    public String checkRList(String rList){
       return rList;       
    }
    
    public String checkEntity(String entity)
      throws Error
    {
       return entity;
    }
    
    public String checkReadOnly(String attribute)
      throws Error
    {
       return attribute;
    }    

  private final DTRulesParser parser;

  /** Constructor */
  CUP$DTRulesParser$actions(DTRulesParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DTRulesParser$do_action(
    int                        CUP$DTRulesParser$act_num,
    java_cup.runtime.lr_parser CUP$DTRulesParser$parser,
    java.util.Stack            CUP$DTRulesParser$stack,
    int                        CUP$DTRulesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DTRulesParser$result;

      /* select the action based on the action number */
      switch (CUP$DTRulesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // boolexpr ::= foranyallwhereStmnt 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // boolexpr ::= foranyalloftheStmnt 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // boolexpr ::= id ARROW boolexpr 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i +" dictpush "+e+" dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // boolexpr ::= BOOL_ID 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // boolexpr ::= BOOL 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // boolexpr ::= POSSESSION boolexpr 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                    if(r.equalsIgnoreCase("sponsor")){
                       RESULT = "{ 'bogus' { pop dup } sponsor if } >> " + b + " dictpop dictpop";
                    }else{   
                       RESULT = r + " >> "+ b +" dictpop dictpop"; 
                    }
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // boolexpr ::= expr ABSOLUTETIME 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		                 
                   RESULT = b +" " + t ;
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // boolexpr ::= DATEMODIFIER boolexpr 
            {
              String RESULT =null;
		String m = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = m + " " + e +" setday "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // boolexpr ::= LPAREN boolexpr RPAREN 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // boolexpr ::= USING ENTITY boolexpr 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = id + " dictpush " + b + " dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // boolexpr ::= isaStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // boolexpr ::= doesStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // boolexpr ::= thereisnoStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // boolexpr ::= isSubstring 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // boolexpr ::= isthereStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // boolexpr ::= edgindivStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // boolexpr ::= hasapersonStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // boolexpr ::= hasaStatement 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // boolexpr ::= id INCLUDESMEMBER id 
            {
              String RESULT =null;
		String list1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = list1 + " " + list2 + " intersects"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // boolexpr ::= id ISAMEMBEROF id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rlist +" "+ i + " memberof"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // boolexpr ::= isforeverytest 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // boolexpr ::= whohasaTest 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // boolexpr ::= NOT boolexpr 
            {
              String RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b + " !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // boolexpr ::= boolexpr OR boolexpr 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b1 + " " + b2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // boolexpr ::= boolexpr AND boolexpr 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b1 + " " + b2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // boolexpr ::= boolexpr EQUALS boolexpr 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b1 + " " + b2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // boolexpr ::= expr LESSTHANEQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // boolexpr ::= expr GREATERTHANEQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // boolexpr ::= expr NOTEQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // boolexpr ::= expr EQUALS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // boolexpr ::= commaPhrase 
            {
              String RESULT =null;
		String cp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = cp;  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // boolexpr ::= expr GREATERTHAN expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // boolexpr ::= expr LESSTHAN expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // boolexpr ::= FALSEIF boolexpr 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b + " !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // boolexpr ::= TRUEIF boolexpr 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = b; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("boolexpr",46, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // commaPhrase ::= COMMALIST commaListExpr 
            {
              String RESULT =null;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaPhrase",39, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // commaPhrase ::= LISTEQUALS expr EQUALS expr NT$3 COMMA commaexpr 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT += ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaPhrase",39, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$3 ::= 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
  
                    firstexp = e1;
                    RESULT = e1 +" "+ e2 +" == "; 
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$3",53, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // commaPhrase ::= expr EQUALS expr NT$2 COMMA commaexpr 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT += ceq;
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaPhrase",39, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$2 ::= 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
  
                    firstexp = e1;
                    RESULT = e1 +" "+ e2 +" == "; 
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$2",52, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // commaListExpr ::= expr 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   RESULT = id ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaListExpr",40, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // commaListExpr ::= expr COMMA commaListExpr 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		     
                    RESULT  = id + " \",\"" + " + " + ceq + " + ";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaListExpr",40, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // commaexpr ::= expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 	RESULT = firstexp + " "+e1+" == || "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // commaexpr ::= expr OR commaexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = firstexp +" "+e1+" == || "+ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // commaexpr ::= expr COMMA OR commaexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   RESULT = firstexp +" "+e1+" == || "+ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // commaexpr ::= expr COMMA commaexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String ceq = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   RESULT = firstexp +" "+e1+" == || "+ceq; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commaexpr",48, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // number ::= BIGDECIMAL 
            {
              String RESULT =null;
		String bg = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = bg; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // number ::= INTEGER TIMEPERIOD 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i + " " + t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // number ::= FLOAT 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = r; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // number ::= INTEGER 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("number",45, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // mid ::= mid TIMEPERIOD 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i + " " + t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // mid ::= RLIST 
            {
              String RESULT =null;
		String rl = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rl; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // mid ::= ENTITY 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // mid ::= BOOL_ID 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // mid ::= ID 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = checkReadOnly(i); 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("mid",44, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // id ::= SUMOFEACH id FORALL id 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                   RESULT = "0 { "+i1+" + } "+i2+" foreach";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // id ::= SUMOFEACH id FORALL id WHERE bexpression 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                   RESULT = "0 { { "+i1+" + } "+test+" if } "+i2+" foreach";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // id ::= id TIMEPERIOD 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i + " " + t ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // id ::= TIMEPERIOD OF id 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 if(t.equals("years"))  t = "year";
                   if(t.equals("months")) t = "month";
                   if(t.equals("day"))    t = "day";
                   RESULT = i + " " + t + "of";
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // id ::= RLIST 
            {
              String RESULT =null;
		String rl = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rl; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // id ::= ENTITY 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // id ::= ID 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("id",43, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // term ::= number 
            {
              String RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = n; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("term",42, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // term ::= STR 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("term",42, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // term ::= id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("term",42, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr ::= deepcopyLists 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = id ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr ::= SIZEOF id 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = checkRList(list) + " sizeof" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr ::= id ARROW expr 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = i +" dictpush "+e+" dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr ::= POSSESSION id 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                    if(r.equalsIgnoreCase("sponsor")){
                       RESULT = "{ 'bogus' { pop dup } sponsor if } >> " + i + " dictpop dictpop";
                    }else{   
                       RESULT = r + " >> "+ i +" dictpop dictpop"; 
                    }
                
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr ::= expr START OF TIMEPERIOD 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 
                if(!t.equals("months")) throw new Error("invalid syntax: "+t);
                RESULT = e1+" startofmonth"; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr ::= expr END OF TIMEPERIOD 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 
                if(!t.equals("months")) throw new Error("invalid syntax: "+t);
                RESULT = e1+" endofmonth"; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= lookupExpression 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= NUMBEROFTIMEPERIOD BETWEEN expr AND expr 
            {
              String RESULT =null;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1 + " " + e2 + " " + p ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr ::= USING id NT$1 expr 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT +=  e + " dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$1 ::= 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
 RESULT = i + " dictpush "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$1",51, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= MINUS expr 
            {
              String RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " 0 "+e1+" - "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= expr PLUSSTR expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+op; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= expr SCALED INTEGER DECPLACES ROUNDED expr ORMORE 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 
                String zeros = "0000000000000000000000000000000000000000";
                String sConst = "1"+zeros.substring(0,Integer.parseInt(n));
                RESULT = e1 + " " + sConst + " * "+e2+" round " + sConst +" div"; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= expr SCALED INTEGER DECPLACES 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 
                String zeros  = "0000000000000000000000000000000000000000";
                String sConst = "1" + zeros.substring(0,Integer.parseInt(n));
                RESULT = e1 + " " + sConst + " * 1 round " + sConst +" div"; 
             
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= expr ROUNDED expr ORMORE 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = e1 +" "+e2+" round"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr ::= GREATEROF expr OR expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  e1 + " " + e2 + " max"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr ::= LESSEROF expr OR expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  e1 + " " + e2 + " min"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = e; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= term 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = t; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("expr",47, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // bexpression ::= boolexpr 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("bexpression",49, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lookupExpression ::= LOOKUP expr USINGCOLUMN expr AND expr FROMTABLE expr FORDATE expr RETURNING expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-10)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+i1+" "+i2+" "+e3+" "+e4+" " +e5+" lookupMultipleParmTable"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lookupExpression ::= LOOKUP CODE expr USINGCOLUMN expr FROMTABLE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" tablelookupforcode"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lookupExpression ::= LOOKUP CODE expr USINGCOLUMN expr FROMTABLE expr FORDATE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" "+e4+" tabledatelookupforcode"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lookupExpression ::= LOOKUP expr USINGCOLUMN expr FROMTABLE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" tablelookup"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lookupExpression ::= LOOKUP expr USINGCOLUMN expr FROMTABLE expr FORDATE expr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e1+" "+e2+" "+e3+" "+e4+" tabledatelookup"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("lookupExpression",34, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // deepcopyLists ::= ACOPYOFALLMEMBERSIN id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = i +" deepcopy"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("deepcopyLists",35, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // throwRulesException ::= THROWRULESEXCEPTION ID 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = id + " throwexception" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("throwRulesException",33, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // throwRulesException ::= THROWRULESEXCEPTION STR 
            {
              String RESULT =null;
		String str = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = str + " throwexception" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("throwRulesException",33, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // foranyallwhereStmnt ::= boolexpr FORANYALLOFTHE id IN id WHERE boolexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 String boolVal = ParserUtil.getBoolToUse(opr);
                                  RESULT = boolVal + " { { " + e1 + " " + opr +                                          
                                                 " } " + test + " if "   +                                      
                                           " } " +  group + "." + rlist + " foreach " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyallwhereStmnt",32, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foranyallwhereStmnt ::= boolexpr FORANYALLOFTHE id WHERE boolexpr 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 String boolVal = ParserUtil.getBoolToUse(opr);
                                  RESULT = boolVal + " { { " + e1 + " " + opr +   
                                                 " } " + test + " if "   +                                      
                                           " } " +  rlist + " foreach " ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyallwhereStmnt",32, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foranyalloftheStmnt ::= foranyalloftheStmnt FORANYALLOFTHE id IN id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 
                                   if (ParserUtil.getBoolToUse(opr).equalsIgnoreCase("false"))
                                   {    
                                      RESULT = ParserUtil.getBoolToUse(opr) +
                                           " { " + e1 + " " + opr + " } " + group + "." + rlist + "  foreach"; 
                                    }
                                    else
                                    {
                                      RESULT = " true { false && } " + rlist + " sizeof 0 == if " +
                                           " { " + e1 + " " + opr + " } " + group + "." + rlist + "  foreach"; 
                                    }
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // foranyalloftheStmnt ::= foranyalloftheStmnt FORANYALLOFTHE id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 
                                   if (ParserUtil.getBoolToUse(opr).equalsIgnoreCase("false"))
                                   {  
                                      RESULT = ParserUtil.getBoolToUse(opr) + " { " + e1 + " " + opr + " } " + rlist + "  foreach";                              
                                   }
                                   else
                                   {
                                      RESULT = "true { false && } " + rlist + " sizeof 0 == if "
                                             + " { " + e1 + " " + opr + " } " + rlist + "  foreach";                              
                                   }
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // foranyalloftheStmnt ::= boolexpr FORANYALLOFTHE id IN id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 String boolVal = ParserUtil.getBoolToUse(opr);
                                  RESULT = boolVal + " { " + e1 + " " + opr +                                          
                                           " } " +  group + "." + rlist + " foreach " ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // foranyalloftheStmnt ::= boolexpr FORANYALLOFTHE id 
            {
              String RESULT =null;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 String boolVal = ParserUtil.getBoolToUse(opr);
                                  RESULT = boolVal + " { " + e1 + " " + opr +                                          
                                           " } " +  rlist + " foreach " ; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("foranyalloftheStmnt",31, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // isforeverytest ::= IS bexpression FOREVERY id IN id WHERE bexpression 
            {
              String RESULT =null;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = " true { { "+b1+" && } "+ b2 +" if } "+ i2 +" foreach";  
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isforeverytest",28, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // doesStatement ::= DOES EVERY id OFINDIVIDUALHAVE id WHERE bexpression 
            {
              String RESULT =null;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " true { individual dictpush inverserelationship dictpush "+
                                              "{ false "+
                                                 "{ individual dictpush inverserelationship dictpush "+
                                                   "{ eligiblestudent true == || } relationshipcd "+r2+" == if "+
                                                   "dictpop dictpop "+
                                                 "} relationships foreach && "+
                                              "} relationshipcd "+r1+" == if "+
                                           "dictpop dictpop } relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("doesStatement",24, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // whohasaStatement ::= WHOHASA id whohasaStatement 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual dictpush inverserelationship dictpush " +
                                                "{ "+test+" } relationshipcd " + relationship +" == if "+
                                                "dictpop dictpop " +
                                           "} individual.relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaStatement",16, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // whohasaStatement ::= WHOHASA id WHERE bexpression 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual dictpush inverserelationship dictpush " +
                                                "{ "+test+" || } relationshipcd " + relationship +" == if "+
                                                "dictpop dictpop " +
                                           "} individual.relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaStatement",16, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // whohasaStatement ::= WHOHASA id 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual dictpush inverserelationship dictpush " +
                                                "relationshipcd " + relationship +" == || "+
                                                "dictpop dictpop "+
                                           "} individual.relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaStatement",16, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // whohasaTest ::= whohasaStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " false " + stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("whohasaTest",38, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // hasapersonStatement ::= HASAPERSON whohasaStatement 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+
                                              "individual dictpush inverserelationship dictpush "+
                                              test + " dictpop dictpop "+
                                           "} individual.relationships foreach";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasapersonStatement",15, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // hasapersonStatement ::= HASAPERSON WHERE bexpression 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+
                                              "individual dictpush inverserelationship dictpush "+
                                              test + " ||  dictpop dictpop "+
                                           "} individual.relationships foreach";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasapersonStatement",15, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // hasaStatement ::= HASA id whohasaStatement 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { individual dictpush inverserelationship dictpush "+
                                           "{ "+test+" } relationshipcd " + relationship +" == if dictpop dictpop "+
                                           "} individual.relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasaStatement",14, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // hasaStatement ::= HASA id WHERE bexpression 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { individual dictpush inverserelationship dictpush "+
                                           "{ "+test+" || } relationshipcd " + relationship +" == if dictpop dictpop "+
                                           "} individual.relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasaStatement",14, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // hasaStatement ::= HASA id 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { individual dictpush inverserelationship dictpush "+
                                           "relationshipcd "+relationship+" == || dictpop dictpop " +
                                           "} individual.relationships foreach";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("hasaStatement",14, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // isaStatement ::= ISA id TOAPERSON WHERE bexpression 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+
                                             "individual dictpush "+
                                             "{ "+test+" || } relationshipcd " + relationship + " == if "+
                                             "dictpop "+
                                           "} relationships foreach";
							   
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isaStatement",13, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // isaStatement ::= ISA id 
            {
              String RESULT =null;
		String relationship = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { relationshipcd "+relationship+" == || "+
                                           "} individual.relationships foreach ";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isaStatement",13, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // forallStatement ::= actionStatement FOREACH id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+id+"s foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // forallStatement ::= actionStatement FOREACH id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+ checkRList(id2+"."+id1+"s") + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // forallStatement ::= actionStatement FOREACH id AND id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" dictpush "+stmt+" dictpop } "+ checkRList(group+"."+id1+"s") + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // forallStatement ::= actionStatement FOREACH id AND id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" dictpush { "+stmt+" } "+test+" if dictpop } "+ checkRList(group+"."+id1+"s") + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // forallStatement ::= actionStatement FOREACH id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { "+stmt+" } "+test+" if  } "+ checkRList(group+"."+id+"s")+ " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // forallStatement ::= actionStatement FOREACH id AND id IN id ANDTHEIR id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" dictpush { " + stmt + " } "+ group2+" foreach dictpop } "+ checkRList(group1 + "." + id + "s") + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // forallStatement ::= actionStatement FORALL id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { "+stmt+" } "+test+" if  } "+ checkRList(list) +" foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // forallStatement ::= actionStatement FORALL id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+id+" foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // forallStatement ::= actionStatement FORALL id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+ checkRList(id2+"."+id1) +" foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // forallStatement ::= actionStatement FORALL id AND id IN id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" dictpush "+stmt+" dictpop } "+ checkRList(group+"."+id1) +" foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // forallStatement ::= actionStatement FORALL id AND id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" dictpush { "+stmt+" } "+test+" if dictpop } "+ checkRList(group+"."+id1) +" foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // forallStatement ::= actionStatement FORALL id IN id WHERE bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { "+stmt+" } "+test+" if  } "+ checkRList(group+"."+id) +" foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // forallStatement ::= actionStatement FORALL id AND id IN id ANDTHEIR id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-8)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+id2+" dictpush { " + stmt + " } "+ group2+" foreach dictpop } "+ checkRList(group1 + "." + id) + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // forallStatement ::= actionStatement FORALL id ANDTHEIR id 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { " + stmt + " } "+ checkRList(group2) + " foreach } "+ checkRList(id) + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forallStatement",11, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // forAllEdgIndv ::= ADDALL_EDG_INDV ENTITY ANDFOREACH actionStatement 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String as = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ " + id + " dictpush edg_individuals edg_individual copyentity addto dictpop " +
                                            "} edg_individuals foreach " +
                                            id + " dictpush { " + as + " } edg_individuals foreach dictpop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forAllEdgIndv",27, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // forAllEdgIndv ::= ADDALL_EDG_INDV ENTITY 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ " + id + " dictpush edg_individuals edg_individual copyentity addto dictpop " +
                                            "} edg_individuals foreach";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("forAllEdgIndv",27, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // removefromlist ::= REMOVE id FROM id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = list + " " + i + " removefrom";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // removefromlist ::= REMOVE id FROM id WHERE bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = "{ " + list + " " + i + " removefrom } " + test + " if";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // removefromlist ::= REMOVE EACH id FROM id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = "{ pop " + list + " " + list + " 0 getat removefrom } 0 " 
                                            + list + " sizeof forloop" ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // removefromlist ::= REMOVE EACH id FROM id WHERE bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                  RESULT = "{ { " + list + " " + i + " removefrom} " 
                                            + test + " if} " + list + " foreach" ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("removefromlist",29, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // formGroupStatement ::= ADDALL id ANDFOREACH actionStatement 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String toGroup = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = toGroup +" dictpush { "+
                               "'edg_individual' createentity dictpush "+
                               "/individual individual.individual def "+
                               "edg_individuals edg_individual addto dictpop } "+
                               "individuals foreach "+
                               "{ individual dictpush "+stmt+" dictpop } edg_individuals foreach "+
                               "dictpop edg_groups "+toGroup +" addto";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // formGroupStatement ::= ADDALL id 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String toGroup = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = toGroup +" dictpush { 'edg_individual' createentity dictpush "+
                                  "/individual individual.individual def "+
                                  "edg_individuals edg_individual addto dictpop "+
                                  "} individuals foreach dictpop "+ 
                                  " edg_groups "+toGroup +" addto";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formGroupStatement ::= ADD ID TO RLIST 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  i1+ " " + i + " addto" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formGroupStatement ::= ADD ENTITY TO RLIST 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  i1+ " " + i + " addto" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // formGroupStatement ::= ADD ENTITY TO ENTITY 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  checkRList(i1 + "s")+ " " + i + " addto" ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formGroupStatement ::= FORMAGROUP id CALLED id 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String variable = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "/"+variable+" '"+id+"' createentity def"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("formGroupStatement",25, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // edgindivStatement ::= EDGINDIVHAS bexpression 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false individual.individual { "+
                                               "{ swap "+test+" || swap } over individual == if "+
                                           "} edg_group.edg_individuals foreach pop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("edgindivStatement",21, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // copyStatement ::= COPY id TO id 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "/"+ i2 + " " + i + " copyentity def"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("copyStatement",26, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // wherehasStatement ::= actionStatement WHERE id HAS bexpression 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { { {pop false "+stmt+"  } "+test+" if } over if } " + i + "s foreach pop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("wherehasStatement",10, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // addtocontextStatement ::= FINDTHEFIRST id IN id WHERE bexpression ANDADDIT TOTHECONTEXT 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		 RESULT = "true "+
                                              "{  { pop "+i+" false } over "+test+" and if " +
                                              "} "+list+" foreach " +
                                           "pop dictpush";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("addtocontextStatement",30, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // addtocontextStatement ::= ADD id TOTHECONTEXT 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = i + " addtocontext"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("addtocontextStatement",30, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // findStatement ::= FINDALLEDGINDIVIDUAL WITHIN id ANDSET setPhrase 
            {
              String RESULT =null;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+ phrase + " } edg_group.edg_individuals foreach pop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // findStatement ::= FINDALLPERSONS WHERE bexpression ANDFINDREFERNCEDINDIVIDUAL IN id ANDSET setPhrase 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual dictpush inverserelationship dictpush "+
                                              "{ " +
                                                  group +" dictpush "+
                                                  "inverserelationship dictpush individual { "+
                                                     "{ "+phrase+" } over individual == if "+
                                                  "} edg_individuals foreach dictpop "+
                                                  "pop dictpop "+
                                              "} "+b+" if dictpop dictpop " +
                                           "} relationships foreach "; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // findStatement ::= FINDALLPERSONS WHERE bexpression ANDFINDINDIVIDUAL IN id ANDSET setPhrase 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ individual dictpush inverserelationship dictpush "+
                                              "{ " +
                                                  group +" dictpush "+
                                                  "individual { "+
                                                     "{ "+phrase+" } over individual == if "+
                                                  "} edg_individuals foreach "+
                                                  "pop dictpop "+
                                              "} "+b+" if dictpop dictpop " +
                                           "} relationships foreach "; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // findStatement ::= FINDAELEMENT IN id WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { "                  +
                                               "{ "                   +
                                                   "{ pop false "     +
                                                        phrase        +
                                                   " } " + b + " if " +
                                                " } over if "         +
                                           " } " + checkRList(list) + " foreach pop";                       
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // findStatement ::= FINDAENTITY IN id WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { "                  +
                                               "{ "                   +
                                                   "{ pop false "     +
                                                        phrase        +
                                                   " } " + b + " if " +
                                                " } over if "         +
                                           " } " + group + "." +entity+"s foreach pop";
                       
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // findStatement ::= FINDAENTITY WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "true { "                  +
                                               "{ "                   +
                                                   "{ pop false "     +
                                                        phrase        +
                                                   "} " + b + " if " +
                                                "} over if "         +
                                           "} "+entity+"s foreach pop";
                       
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // findStatement ::= FINDINDIVIDUAL IN id ANDSET setPhrase 
            {
              String RESULT =null;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "individual " + group + " dictpush { " +
                                             "individual over == "+
                                             "{ individual dictpush " +
                                                phrase +
                                                " dictpop "+
                                             "} swap if "+
                                           "} edg_individuals foreach " +
                                           "pop dictpop";
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // findStatement ::= FINDAPERSON WHERE bexpression ANDSET setPhrase 
            {
              String RESULT =null;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String phrase = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " true { individual dictpush inverserelationship dictpush " +
                                             "{ { pop false "+ phrase + " } "+b+" if } over if "+
                                             "dictpop dictpop "+
                                           "} individual.relationships foreach pop" ;
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("findStatement",22, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // thereisnoStatement ::= THEREISNO ELEMENT IN id 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { true || } "+ checkRList(list) + " foreach !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // thereisnoStatement ::= THEREISNO ELEMENT IN id WHERE bexpression 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(list) + " foreach !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // thereisnoStatement ::= THEREISNO id IN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(group+"."+entity+"s") + " foreach !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // thereisnoStatement ::= THEREISNO id WITHIN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(group+"."+entity+"s") + " foreach !"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("thereisnoStatement",20, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // isthereStatement ::= ISTHERE id AND id IN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-6)).value;
		String entity2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+entity2+" dictpush "+test+" || dictpop } "+
   						                checkRList(group+"."+entity+"s") + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // isthereStatement ::= ISTHERE ELEMENT IN id WHERE bexpression 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(list) + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // isthereStatement ::= ISTHERE id IN id WHERE bexpression 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "false { "+test+" || } "+ checkRList(group +"."+entity+"s") + " foreach"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // isthereStatement ::= ISTHERE ELEMENT IN id 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = "false { true  || } " + checkRList(list) + " foreach"  ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // isthereStatement ::= ISTHERE id IN id 
            {
              String RESULT =null;
		String entity = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String group = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		  RESULT = "false { true  || } " + group + "." +entity +"s"+ " foreach"  ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isthereStatement",17, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // isSubstring ::= IS orSubstring SUBSTRINGOF expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = e2 + " false " + s + " swap pop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("isSubstring",19, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // orSubstring ::= expr 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " over "+e+" substring ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // orSubstring ::= orSubstring COMMA OR expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s + " over "+e+" substring ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // orSubstring ::= orSubstring COMMA expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s + " over "+e+" substring ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // orSubstring ::= orSubstring OR expr 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = s + " over "+e+" substring ||"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("orSubstring",18, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sortStatement ::= SORT DESCENDING id BY id 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rlist +" /"+attribute+" { < } sort "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("sortStatement",9, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sortStatement ::= SORT ASCENDING id BY id 
            {
              String RESULT =null;
		String rlist = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = rlist +" /"+attribute+" { > } sort "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("sortStatement",9, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // performStatement ::= TABLENAME 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = t + " performtable"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("performStatement",7, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifStatement ::= IF bexpression THEN actionStatement 
            {
              String RESULT =null;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ "+stmt+" } "+test+" if"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("ifStatement",8, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // setPhrase2 ::= mid EQUALS bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String b = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		                                    
                                   RESULT = "/" + checkReadOnly(i) + " " + b ; 
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase2",37, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // setPhrase2 ::= mid EQUALS expr 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String e = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "/" + i + " " + e ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase2",37, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // setPhrase ::= mid EQUALS ACOPYOFALLMEMBERSIN id WHERE bexpression 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-5)).value;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String test = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = "{ { " + i + " " + checkRList(list).substring(0,list.length()-1) 
                                 + " copyentity addto } " + test + " if } " + list + " foreach" ; 
                              
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // setPhrase ::= setPhrase COMMA SET setPhrase 
            {
              String RESULT =null;
		String setSt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-3)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = setSt + " " + p ; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // setPhrase ::= ON POSSESSION id setPhrase 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		
                                RESULT =  "{ "+
                                             " {" +
                                                 " " + p +  
                                             " } " + i1 + "." + i1 + " " + i1 + " == if" +
                                         " } "+ i2 +"s foreach ";
                              
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // setPhrase ::= POSSESSION setPhrase 
            {
              String RESULT =null;
		String r = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		   
                                  if(r.equalsIgnoreCase("sponsor")){
                                    RESULT = "{ 'bogus' { pop dup } sponsor if } >> " + p + " dictpop dictpop";
                                  }else{   
                                    RESULT = r + " >> "+ p +" dictpop dictpop ";
                                  }
                              
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // setPhrase ::= id ARROW id ARROW setPhrase2 
            {
              String RESULT =null;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-4)).value;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p + " "+i1+" dictpush "+i2+" dictpush def dictpop dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // setPhrase ::= id ARROW setPhrase2 
            {
              String RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p + " "+i+" dictpush def dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // setPhrase ::= setPhrase2 
            {
              String RESULT =null;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p + " def"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setPhrase",36, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // setStatement ::= SET setPhrase 
            {
              String RESULT =null;
		String p = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = p; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("setStatement",6, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exitStatement ::= EXIT 
            {
              String RESULT =null;
		 RESULT =""; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("exitStatement",23, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conditionStatement ::= CPOSTFIX 
            {
              String RESULT =null;
		String pfx = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = pfx; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatement",5, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conditionStatement ::= bexpression 
            {
              String RESULT =null;
		String exp = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatement",5, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // actionStatement ::= throwRulesException 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // actionStatement ::= removefromlist 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // actionStatement ::= LPAREN actionStatement RPAREN 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // actionStatement ::= USROPER 
            {
              String RESULT =null;
		String opr = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = opr; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // actionStatement ::= forAllEdgIndv 
            {
              String RESULT =null;
		String stmnt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // actionStatement ::= USING id NT$0 actionStatement 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT +=  stmt + " dictpop"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
 RESULT = id + " dictpush "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("NT$0",50, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // actionStatement ::= APOSTFIX 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // actionStatement ::= DUMMY 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = " "; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actionStatement ::= addtocontextStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // actionStatement ::= sortStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actionStatement ::= ifStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // actionStatement ::= copyStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // actionStatement ::= formGroupStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // actionStatement ::= findStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // actionStatement ::= someofeachStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // actionStatement ::= forallStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // actionStatement ::= wherehasStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // actionStatement ::= setStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // actionStatement ::= exitStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // actionStatement ::= performStatement 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatement",3, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // actionStatementList ::= actionStatement EOP 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatementList",2, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // actionStatementList ::= actionStatementList actionStatement EOP 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list + " " + stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("actionStatementList",2, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conditionStatementList ::= conditionStatement EOP 
            {
              String RESULT =null;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatementList",4, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conditionStatementList ::= actionStatementList conditionStatement EOP 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list + " " + stmt; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("conditionStatementList",4, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // commentblock ::= SKIP 
            {
              String RESULT =null;

              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("commentblock",41, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statementList ::= statementList commentblock 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statementList ::= ACTION actionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  list +"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statementList ::= CONDITION conditionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT =  list+"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statementList ::= statementList ACTION actionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = list+ "\n" + list2+"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statementList ::= statementList CONDITION conditionStatementList 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-2)).value;
		String list2 = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.peek()).value;
		 RESULT = list+"\n" + list2+"\n"; 
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("statementList",1, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= statementList EOP 
            {
              String RESULT =null;
		String list = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		 RESULT = list; parser.done_parsing();
                               
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("goal",0, RESULT);
            }
          return CUP$DTRulesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$DTRulesParser$stack.elementAt(CUP$DTRulesParser$top-1)).value;
		RESULT = start_val;
              CUP$DTRulesParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$DTRulesParser$parser.done_parsing();
          return CUP$DTRulesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

